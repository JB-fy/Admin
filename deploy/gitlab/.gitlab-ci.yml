# 需先在远程服务器设置ssh免密登录（参考linux常用命令）,并在gitlab中设置私钥环境变量SSH_PRIVATE_KEY
variables:
  # PROJECT_DIR: $CI_PROJECT_DIR  # GitLab自带预定义变量，表示项目根目录
  APP_NAME: admin
  REMOTE_SERVER_ARR: "192.168.0.200" # 多IP空格隔开
  REMOTE_USER: root
  REMOTE_DIR: /server/app/$APP_NAME

stages:
  - vue
  - go
  - docker

buildVue:
  stage: vue
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - view/**/*
      when: on_success
  image: node:22.15.1
  cache:
    key: $APP_NAME-vue
    paths:
      - ./view/platform/node_modules
      - ./view/org/node_modules
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do ssh-keyscan -H $REMOTE_SERVER >> ~/.ssh/known_hosts; done
    - chmod 644 ~/.ssh/known_hosts
    # - npm config set registry=https://registry.npm.taobao.org/  # 更改镜像源
  script:
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do ssh $REMOTE_USER@$REMOTE_SERVER "rm -rf $REMOTE_DIR/public/admin && mkdir -p $REMOTE_DIR/public/admin"; done # 注意：非root用户连接ssh，使用mkdir会报无权限，增加sudo执行则需输入密码。故必须手动执行
    - (cd ./view/platform && npm install && npm run build-only)
    - (cd ./view/org && npm install && npm run build-only)
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do scp -r ./public/admin $REMOTE_USER@$REMOTE_SERVER:$REMOTE_DIR/public; done

buildGo:
  stage: go
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - api/**/*
      when: on_success
  image: golang:1.23.1
  variables:
    GOPATH: $CI_PROJECT_DIR/api/.go # 设置GOPATH，默认/go无法缓存
    GOPROXY: https://goproxy.cn,direct # 更改镜像源
  cache:
    key: $APP_NAME-go
    paths:
      - ./api/.go
  before_script:
    - "[ -f ./api/.go/bin/gf ] || go install github.com/gogf/gf/cmd/gf/v2@v2.9.0"
  script:
    - (cd ./api && ./.go/bin/gf build)
  artifacts:
    paths: 
      - ./api/main_new  # 保留构建产物。下方buildDocker需要
    expire_in: 1 hour  # 1小时后自动清理

buildDocker:
  stage: docker
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      changes:
        - api/**/*
      when: on_success
  image: docker:28.1.1
  services:
    - name: docker:28.1.1-dind
      alias: docker
      command: ["--registry-mirror=https://docker.m.daocloud.io"] # 更改镜像源
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do ssh-keyscan -H $REMOTE_SERVER >> ~/.ssh/known_hosts; done
    - chmod 644 ~/.ssh/known_hosts
  script:
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do ssh $REMOTE_USER@$REMOTE_SERVER "mkdir -p $REMOTE_DIR/deploy/docker && mkdir -p $REMOTE_DIR/api/manifest && mkdir -p $REMOTE_DIR/public/upload && chmod -R 777 $REMOTE_DIR"; done # 注意：非root用户连接ssh，使用mkdir会报无权限，增加sudo执行则需输入密码。故必须手动执行
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do scp -r ./api/manifest $REMOTE_USER@$REMOTE_SERVER:$REMOTE_DIR/api && scp ./deploy/docker/compose.yaml $REMOTE_USER@$REMOTE_SERVER:$REMOTE_DIR/deploy/docker; done
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do ssh $REMOTE_USER@$REMOTE_SERVER "echo -e \"SERVER_LOCAL_IP=\$(hostname -I | awk '{printf \"%s\", \$1}')\nSERVER_NETWORK_IP=\$(curl -s --max-time 3 ifconfig.me || curl -s --max-time 3 https://ipinfo.io/ip || curl -s --max-time 3 https://checkip.amazonaws.com || curl -s --max-time 3 https://icanhazip.com || curl -s --max-time 3 https://api.ipify.org)\" > $REMOTE_DIR/api/.env"; done
    - docker build -t $APP_NAME . && docker save -o $APP_NAME.tar $APP_NAME
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do scp $APP_NAME.tar $REMOTE_USER@$REMOTE_SERVER:$REMOTE_DIR; done
    - for REMOTE_SERVER in $REMOTE_SERVER_ARR; do ssh $REMOTE_USER@$REMOTE_SERVER "docker compose -f $REMOTE_DIR/deploy/docker/compose.yaml down || true && docker tag $APP_NAME:latest $APP_NAME:bak || true && docker load -i $REMOTE_DIR/$APP_NAME.tar && docker image prune -f && docker compose -f $REMOTE_DIR/deploy/docker/compose.yaml up -d"; done
  # after_script:
  #   - rm -f ./api/main_new  # 清理构建产物