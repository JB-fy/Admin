// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"{TplImportPrefix}/internal"
	"strings"

	"github.com/gogf/gf/v2/container/garray"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// internal{TplTableNameCamelCase}Dao is internal type for wrapping internal DAO implements.
type internal{TplTableNameCamelCase}Dao = *internal.{TplTableNameCamelCase}Dao

// {TplTableNameCamelLowerCase}Dao is the data access object for table {TplTableName}.
// You can define custom methods on it to extend its functionality as you wish.
type {TplTableNameCamelLowerCase}Dao struct {
	internal{TplTableNameCamelCase}Dao
}

var (
	// {TplTableNameCamelCase} is globally public accessible object for table {TplTableName} operations.
	{TplTableNameCamelCase} = {TplTableNameCamelLowerCase}Dao{
		internal.New{TplTableNameCamelCase}Dao(),
	}
)

func (dao {TplTableNameCamelLowerCase}Dao) ParseField(field []string, afterField *[]string, joinCode *[]string) func(m *gdb.Model) *gdb.Model {
	return func(m *gdb.Model) *gdb.Model {
		for _, v := range field {
			switch v {
			case "id":
				m = m.Fields(dao.Table() + "." + dao.PrimaryKey())
			default:
				if garray.NewStrArrayFrom(dao.Column()).Contains(v) {
					m = m.Fields(dao.Table() + "." + v)
				} else {
					m = m.Fields(v)
				}
			}
		}
		return m
	}
}

func (dao {TplTableNameCamelLowerCase}Dao) ParseFilter(filter g.MapStrAny, joinCode *[]string) func(m *gdb.Model) *gdb.Model {
	return func(m *gdb.Model) *gdb.Model {
		for k, v := range filter {
			switch k {
			case "id":
				m = m.Where(dao.Table()+"."+dao.PrimaryKey(), v)
			# case 'excId':
			# 	if (is_array($value)) {
			# 		if (count($value) === 1) {
			# 			$this->builder->where($this->getTable() . '.' . $this->getKey(), $operator ?? '<>', array_shift($value), $boolean ?? 'and');
			# 		} else {
			# 			$this->builder->whereNotIn($this->getTable() . '.' . $this->getKey(), $value, $boolean ?? 'and');
			# 		}
			# 	} else {
			# 		$this->builder->where($this->getTable() . '.' . $this->getKey(), $operator ?? '<>', $value, $boolean ?? 'and');
			# 	}
			# 	return true;
			# case 'startTime':
			# 	$this->builder->where($this->getTable() . '.createTime', $operator ?? '>=', date('Y-m-d H:i:s', strtotime($value)), $boolean ?? 'and');
			# 	return true;
			# case 'endTime':
			# 	$this->builder->where($this->getTable() . '.createTime', $operator ?? '<=', date('Y-m-d H:i:s', strtotime($value)), $boolean ?? 'and');
			# 	return true;
			default:
				kArr := strings.Split(k, " ")
				if garray.NewStrArrayFrom(dao.Column()).Contains(kArr[0]) {
					m = m.Where(dao.Table()+"."+k, v)
				} else {
					m = m.Where(k, v)
				}
			}
		}
		return m
	}
}

func (dao {TplTableNameCamelLowerCase}Dao) ParseGroup(group []string, joinCode *[]string) func(m *gdb.Model) *gdb.Model {
	return func(m *gdb.Model) *gdb.Model {
		for _, v := range group {
			switch v {
			case "id":
				m = m.Group(dao.Table() + "." + dao.PrimaryKey())
			default:
				if garray.NewStrArrayFrom(dao.Column()).Contains(v) {
					m = m.Group(dao.Table() + "." + v)
				} else {
					m = m.Group(v)
				}
			}
		}
		return m
	}
}

func (dao {TplTableNameCamelLowerCase}Dao) ParseOrder(order [][2]string, joinCode *[]string) func(m *gdb.Model) *gdb.Model {
	return func(m *gdb.Model) *gdb.Model {
		for _, v := range order {
			switch v[0] {
			case "id":
				m = m.Order(dao.Table() + "." + dao.PrimaryKey(), v[1])
			default:
				if garray.NewStrArrayFrom(dao.Column()).Contains(v[0]) {
					m = m.Order(dao.Table() + "." + v[0], v[1])
				} else {
					m = m.Order(v[0], v[1])
				}
			}
		}
		return m
	}
}
// Fill with you ideas below.