// =================================================================================
// This file is auto-generated by the GoFrame CLI tool. You may modify it as needed.
// =================================================================================

package auth

import (
	"api/internal/cache"
	daoIndex "api/internal/dao"
	"api/internal/dao/auth/internal"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"sync"

	"github.com/gogf/gf/v2/container/gset"
	"github.com/gogf/gf/v2/container/gvar"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/encoding/gjson"
	"github.com/gogf/gf/v2/text/gstr"
	"github.com/gogf/gf/v2/util/gconv"
)

// menuDao is the data access object for the table auth_menu.
// You can define custom methods on it to extend its functionality as needed.
type menuDao struct {
	*internal.MenuDao
}

var (
	// Menu is a globally accessible object for table auth_menu operations.
	Menu = menuDao{internal.NewMenuDao()}
)

// 获取daoModel
func (daoThis *menuDao) CtxDaoModel(ctx context.Context, dbOpt ...any) *daoIndex.DaoModel {
	return daoIndex.NewDaoModel(ctx, daoThis, dbOpt...)
}

// 解析分库
func (daoThis *menuDao) ParseDbGroup(ctx context.Context, dbGroupOpt ...any) string {
	group := daoThis.Group()
	// 分库逻辑
	/* if len(dbGroupOpt) > 0 {
	} */
	return group
}

// 解析分表
func (daoThis *menuDao) ParseDbTable(ctx context.Context, dbTableOpt ...any) string {
	table := daoThis.Table()
	// 分表逻辑
	/* if len(dbTableOpt) > 0 {
	} */
	return table
}

// 解析Id（未使用代码自动生成，且id字段不在第1个位置时，需手动修改）
func (daoThis *menuDao) ParseId(daoModel *daoIndex.DaoModel) string {
	return daoModel.DbTable + `.` + daoThis.Columns().MenuId
}

// 解析Label（未使用代码自动生成，且id字段不在第2个位置时，需手动修改）
func (daoThis *menuDao) ParseLabel(daoModel *daoIndex.DaoModel) string {
	return daoModel.DbTable + `.` + daoThis.Columns().MenuName
}

// 解析filter
func (daoThis *menuDao) ParseFilter(filter map[string]any, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		for k, v := range filter {
			switch k {
			/* case `xxxx`:
			tableXxxx := Xxxx.ParseDbTable(m.GetCtx())
			m = m.Where(tableXxxx+`.`+k, v)
			m = m.Handler(daoThis.ParseJoin(tableXxxx, daoModel)) */
			case `id`, `id_arr`:
				m = m.Where(daoModel.DbTable+`.`+daoThis.Columns().MenuId, v)
			case `exc_id`, `exc_id_arr`:
				if gvar.New(v).IsSlice() {
					m = m.WhereNotIn(daoModel.DbTable+`.`+daoThis.Columns().MenuId, v)
				} else {
					m = m.WhereNot(daoModel.DbTable+`.`+daoThis.Columns().MenuId, v)
				}
			case `label`:
				m = m.WhereLike(daoModel.DbTable+`.`+daoThis.Columns().MenuName, `%`+gconv.String(v)+`%`)
			case daoThis.Columns().MenuName:
				m = m.WhereLike(daoModel.DbTable+`.`+k, `%`+gconv.String(v)+`%`)
			case `p_id_path_of_old`: //父级ID路径（旧）
				m = m.WhereLike(daoModel.DbTable+`.`+daoThis.Columns().IdPath, gconv.String(v)+`-%`)
			case `time_range_start`:
				m = m.WhereGTE(daoModel.DbTable+`.`+daoThis.Columns().CreatedAt, v)
			case `time_range_end`:
				m = m.WhereLTE(daoModel.DbTable+`.`+daoThis.Columns().CreatedAt, v)
			case daoThis.Columns().MenuName + `_eq`:
				m = m.Where(daoModel.DbTable+`.`+daoThis.Columns().MenuName, v)
			case `self_menu`: //获取当前登录身份可用的菜单。参数：map[string]any{`scene_id`: `场景ID`, `login_id`: 登录身份id, `is_super`: 是否超管（平台超级管理员用）}
				m = m.Where(daoModel.DbTable+`.`+daoThis.Columns().IsStop, 0)
				val := gconv.Map(v)
				if gconv.String(val[`scene_id`]) == `platform` && gconv.Uint(val[`is_super`]) == 1 { //平台超级管理员
					m = m.Where(daoModel.DbTable+`.`+daoThis.Columns().SceneId, val[`scene_id`])
					continue
				}
				roleIdArr, _ := Role.CtxDaoModel(m.GetCtx()).Filter(`self_role`, val).Array(Role.Columns().RoleId)
				if len(roleIdArr) == 0 {
					m = m.Where(`1 = 0`)
					continue
				}
				/* // 方式1：联表查询（不推荐。原因：auth_role及其关联表，后期表数据只会越来越大，故不建议联表）
				tableRoleRelToMenu := RoleRelToMenu.ParseDbTable(m.GetCtx())
				m = m.Where(tableRoleRelToMenu+`.`+RoleRelToMenu.Columns().RoleId, roleIdArr)
				m = m.Handler(daoThis.ParseJoin(tableRoleRelToMenu, daoModel))
				m = m.Group(daoModel.DbTable + `.` + daoThis.Columns().MenuId)
				// 方式2：非联表查询
				menuIdArr, _ := RoleRelToMenu.CtxDaoModel(m.GetCtx()).Filter(RoleRelToMenu.Columns().RoleId, roleIdArr).Distinct().Array(RoleRelToMenu.Columns().MenuId) */
				// 方式3：缓存读取（推荐）
				menuIdArr, _ := Role.CacheGetMenuIdArr(m.GetCtx(), gconv.Uints(roleIdArr)...)
				if len(menuIdArr) == 0 {
					m = m.Where(`1 = 0`)
					continue
				}
				m = m.Where(daoModel.DbTable+`.`+daoThis.Columns().MenuId, menuIdArr)
			default:
				if daoThis.Contains(k) {
					m = m.Where(daoModel.DbTable+`.`+k, v)
				} else {
					m = m.Where(k, v)
				}
			}
		}
		return m
	}
}

// 解析field
func (daoThis *menuDao) ParseField(field []string, fieldWithParam map[string]any, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		for _, v := range field {
			switch v {
			/* case `xxxx`:
			tableXxxx := Xxxx.ParseDbTable(m.GetCtx())
			m = m.Fields(tableXxxx + `.` + v)
			m = m.Handler(daoThis.ParseJoin(tableXxxx, daoModel))
			daoModel.AfterField[v] = struct{}{} */
			case `id`:
				m = m.Fields(daoThis.ParseId(daoModel) + ` AS ` + v)
			case `label`:
				m = m.Fields(daoThis.ParseLabel(daoModel) + ` AS ` + v)
			case Scene.Columns().SceneName:
				tableScene := Scene.ParseDbTable(m.GetCtx())
				m = m.Fields(tableScene + `.` + v)
				m = m.Handler(daoThis.ParseJoin(tableScene, daoModel))
			case `p_menu_name`:
				tableP := `p_` + daoModel.DbTable
				m = m.Fields(tableP + `.` + daoThis.Columns().MenuName + ` AS ` + v)
				m = m.Handler(daoThis.ParseJoin(tableP, daoModel))
			case `tree`:
				m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().MenuId)
				m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().Pid)
				m = m.Handler(daoThis.ParseOrder([]string{`tree`}, daoModel))
			case `show_menu`: //前端显示菜单需要以下字段，且title需要转换
				m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().MenuName)
				m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().MenuIcon)
				m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().MenuUrl)
				m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().ExtraData)
				// m = m.Fields(daoModel.DbTable + `.` + daoThis.Columns().ExtraData + `->'$.i18n' AS i18n`)	//mysql5.6版本不支持
				// m = m.Fields(gdb.Raw(`JSON_UNQUOTE(JSON_EXTRACT(` + daoThis.Columns().ExtraData + `, '$.i18n')) AS i18n`))	//mysql不能直接转成对象返回
				daoModel.AfterField[v] = struct{}{}
			default:
				if daoThis.Contains(v) {
					m = m.Fields(daoModel.DbTable + `.` + v)
				} else {
					m = m.Fields(v)
				}
			}
		}
		for k, v := range fieldWithParam {
			switch k {
			default:
				daoModel.AfterField[k] = v
			}
		}
		if len(daoModel.AfterField) > 0 {
			m = m.Hook(daoThis.HookSelect(daoModel))
		}
		return m
	}
}

// 处理afterField
func (daoThis *menuDao) HandleAfterField(ctx context.Context, record gdb.Record, daoModel *daoIndex.DaoModel) {
	for k, v := range daoModel.AfterField {
		switch k {
		case `show_menu`:
			extraDataJson := gjson.New(record[daoThis.Columns().ExtraData])
			record[`i18n`] = extraDataJson.Get(`i18n`)
			if record[`i18n`] == nil {
				record[`i18n`] = gvar.New(map[string]any{`title`: map[string]any{`zh-cn`: record[daoThis.Columns().MenuName]}})
			}
		default:
			if v == struct{}{} {
				record[k] = gvar.New(nil)
			} else {
				record[k] = gvar.New(v)
			}
		}
	}
}

// hook select
func (daoThis *menuDao) HookSelect(daoModel *daoIndex.DaoModel) gdb.HookHandler {
	return gdb.HookHandler{
		Select: func(ctx context.Context, in *gdb.HookSelectInput) (result gdb.Result, err error) {
			result, err = in.Next(ctx)
			if err != nil || len(result) == 0 {
				return
			}

			var wg sync.WaitGroup
			wg.Add(len(result))
			for _, record := range result {
				go func(record gdb.Record) {
					defer wg.Done()
					daoThis.HandleAfterField(ctx, record, daoModel)
				}(record)
			}
			wg.Wait()
			return
		},
	}
}

// 解析insert
func (daoThis *menuDao) ParseInsert(insert map[string]any, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		if _, ok := insert[daoThis.Columns().Pid]; !ok {
			insert[daoThis.Columns().Pid] = 0
		}
		if _, ok := insert[daoThis.Columns().IsLeaf]; !ok {
			insert[daoThis.Columns().IsLeaf] = 1
		}
		insertData := map[string]any{}
		for k, v := range insert {
			switch k {
			case daoThis.Columns().Pid:
				insertData[k] = v
				if gconv.Uint(v) != 0 {
					pInfo, _ := daoModel.CloneNew().FilterPri(v).One()
					daoModel.AfterInsert[`self_update`] = map[string]any{
						`p_id_path`:   pInfo[daoThis.Columns().IdPath],
						`p_name_path`: pInfo[daoThis.Columns().NamePath],
						`name`:        insert[daoThis.Columns().MenuName],
						`p_level`:     pInfo[daoThis.Columns().Level],
					}
					if pInfo[daoThis.Columns().IsLeaf].Uint() == 1 {
						daoModel.AfterInsert[`p_is_leaf`] = v
					}
				} else {
					daoModel.AfterInsert[`self_update`] = map[string]any{
						`p_id_path`:   `0`,
						`p_name_path`: ``,
						`name`:        insert[daoThis.Columns().MenuName],
						`p_level`:     0,
					}
				}
			case daoThis.Columns().ExtraData:
				if gconv.String(v) == `` {
					v = nil
				}
				insertData[k] = v
			default:
				if daoThis.Contains(k) {
					insertData[k] = v
				}
			}
		}
		m = m.Data(insertData)
		if len(daoModel.AfterInsert) > 0 {
			m = m.Hook(daoThis.HookInsert(daoModel))
		}
		return m
	}
}

// hook insert
func (daoThis *menuDao) HookInsert(daoModel *daoIndex.DaoModel) gdb.HookHandler {
	return gdb.HookHandler{
		Insert: func(ctx context.Context, in *gdb.HookInsertInput) (result sql.Result, err error) {
			result, err = in.Next(ctx)
			if err != nil {
				return
			}
			id, _ := result.LastInsertId()

			for k, v := range daoModel.AfterInsert {
				switch k {
				case `self_update`: //更新自身的ID路径和层级。参数：map[string]any{`p_id_path`: `父级ID路径`, `p_name_path`: `父级名称路径`, `name`: `当前名称`, `p_level`: `父级层级`}
					val := v.(map[string]any)
					daoModel.CloneNew().FilterPri(id).HookUpdate(map[string]any{
						daoThis.Columns().IdPath:   gconv.String(val[`p_id_path`]) + `-` + gconv.String(id),
						daoThis.Columns().NamePath: gconv.String(val[`p_name_path`]) + `-` + gconv.String(val[`name`]),
						daoThis.Columns().Level:    gconv.Uint(val[`p_level`]) + 1,
					}).Update()
				case `p_is_leaf`: //更新父级叶子。参数：父级ID
					daoModel.CloneNew().FilterPri(v).HookUpdateOne(daoThis.Columns().IsLeaf, 0).Update()
				}
			}
			return
		},
	}
}

// 解析update
func (daoThis *menuDao) ParseUpdate(update map[string]any, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		updateData := map[string]any{}
		for k, v := range update {
			switch k {
			case daoThis.Columns().Pid:
				updateData[k] = v
				pIdPath := `0`
				pNamePath := ``
				var pLevel uint = 0
				if gconv.Uint(v) != 0 {
					pInfo, _ := daoModel.CloneNew().FilterPri(v).One()
					pIdPath = pInfo[daoThis.Columns().IdPath].String()
					pNamePath = pInfo[daoThis.Columns().NamePath].String()
					pLevel = pInfo[daoThis.Columns().Level].Uint()
					if pInfo[daoThis.Columns().IsLeaf].Uint() == 1 {
						daoModel.AfterUpdate[`p_is_leaf`] = v
					}
				}
				updateData[daoThis.Columns().IdPath] = gdb.Raw(fmt.Sprintf(`CONCAT( '%s-', %s )`, pIdPath, daoThis.Columns().MenuId))
				updateData[daoThis.Columns().NamePath] = gdb.Raw(fmt.Sprintf(`CONCAT( '%s-', %s )`, pNamePath, daoThis.Columns().MenuName))
				_, okMenuName := update[daoThis.Columns().MenuName]
				if okMenuName {
					updateData[daoThis.Columns().NamePath] = gdb.Raw(fmt.Sprintf(`CONCAT('%s-', '%s')`, pNamePath, gconv.String(update[daoThis.Columns().MenuName])))
				}
				updateData[daoThis.Columns().Level] = pLevel + 1
				childUpdateList := []map[string]any{} //更新所有子孙级的ID路径，名称路径和层级
				pIsLeafCheck := []uint{}              //更新原父级叶子
				oldList, _ := daoModel.CloneNew().FilterPri(daoModel.IdArr).All()
				for _, oldInfo := range oldList {
					if gconv.Uint(v) != oldInfo[daoThis.Columns().Pid].Uint() {
						childUpdateList = append(childUpdateList, map[string]any{
							`p_id_path_of_old`: oldInfo[daoThis.Columns().IdPath],
							`child_id_path`: map[string]any{
								`p_id_path_of_old`: oldInfo[daoThis.Columns().IdPath],
								`p_id_path_of_new`: pIdPath + `-` + oldInfo[daoThis.Columns().MenuId].String(),
							},
							`child_name_path`: map[string]any{
								`p_name_path_of_old`: oldInfo[daoThis.Columns().NamePath],
								`p_name_path_of_new`: pNamePath + `-` + oldInfo[daoThis.Columns().MenuName].String(),
							},
							`child_level`: map[string]any{
								`p_level_of_old`: oldInfo[daoThis.Columns().Level],
								`p_level_of_new`: pLevel + 1,
							},
						})
						if okMenuName {
							childUpdateList[len(childUpdateList)-1][`child_name_path`].(map[string]any)[`p_name_path_of_new`] = pNamePath + `-` + gconv.String(update[daoThis.Columns().MenuName])
						}
						if pIsLeafCheckTmp := gconv.Uints(gstr.Split(oldInfo[daoThis.Columns().IdPath].String(), `-`)); len(pIsLeafCheckTmp) > 2 {
							pIsLeafCheck = append(pIsLeafCheck, pIsLeafCheckTmp[len(pIsLeafCheckTmp)-2])
						}
					} else if okMenuName {
						if name := gconv.String(update[daoThis.Columns().MenuName]); name != oldInfo[daoThis.Columns().MenuName].String() {
							childUpdateList = append(childUpdateList, map[string]any{
								`p_id_path_of_old`: oldInfo[daoThis.Columns().IdPath],
								`child_name_path`: map[string]any{
									`p_name_path_of_old`: oldInfo[daoThis.Columns().NamePath],
									`p_name_path_of_new`: pNamePath + `-` + name,
								},
							})
						}
					}
				}
				if len(childUpdateList) > 0 {
					daoModel.AfterUpdate[`child_update_list`] = childUpdateList
				}
				if len(pIsLeafCheck) > 0 {
					daoModel.AfterUpdate[`p_is_leaf_check`] = pIsLeafCheck
				}
			case daoThis.Columns().MenuName:
				if _, ok := update[daoThis.Columns().Pid]; ok {
					updateData[k] = v
				} else {
					nameOfNew := gconv.String(v)
					updateData[daoThis.Columns().NamePath] = gdb.Raw(fmt.Sprintf(`REGEXP_REPLACE( %s, CONCAT( %s, '$' ), '%s' ),%s = '%s'`, daoThis.Columns().NamePath, daoThis.Columns().MenuName, nameOfNew, daoThis.Columns().MenuName, nameOfNew))
					childUpdateList := []map[string]any{} //更新所有子孙级的名称路径
					oldList, _ := daoModel.CloneNew().FilterPri(daoModel.IdArr).All()
					for _, oldInfo := range oldList {
						if nameOfOld := oldInfo[daoThis.Columns().MenuName].String(); nameOfNew != nameOfOld {
							namePath := oldInfo[daoThis.Columns().NamePath].String()
							childUpdateList = append(childUpdateList, map[string]any{
								`p_id_path_of_old`: oldInfo[daoThis.Columns().IdPath],
								`child_name_path`: map[string]any{
									`p_name_path_of_old`: oldInfo[daoThis.Columns().NamePath],
									`p_name_path_of_new`: namePath[:len(namePath)-len(nameOfOld)] + nameOfNew,
								},
							})
						}
					}
					if len(childUpdateList) > 0 {
						daoModel.AfterUpdate[`child_update_list`] = childUpdateList
					}
				}
			case `child_id_path`: //更新所有子孙级的ID路径。参数：map[string]any{`p_id_path_of_old`: `父级ID路径（旧）`, `p_id_path_of_new`: `父级ID路径（新）`}
				val := gconv.Map(v)
				updateData[daoThis.Columns().IdPath] = gdb.Raw(fmt.Sprintf(`REPLACE( %s, '%s', '%s' )`, daoThis.Columns().IdPath, gconv.String(val[`p_id_path_of_old`]), gconv.String(val[`p_id_path_of_new`])))
			case `child_name_path`: //更新所有子孙级的名称路径。参数：map[string]any{`p_name_path_of_old`: `父级名称路径（旧）`, `p_name_path_of_new`: `父级名称路径（新）`}
				val := gconv.Map(v)
				updateData[daoThis.Columns().NamePath] = gdb.Raw(fmt.Sprintf(`REGEXP_REPLACE( %s, CONCAT( '^', '%s' ), '%s' )`, daoThis.Columns().NamePath, gconv.String(val[`p_name_path_of_old`]), gconv.String(val[`p_name_path_of_new`])))
			case `child_level`: //更新所有子孙级的层级。参数：map[string]any{`p_level_of_old`: `父级层级（旧）`, `p_level_of_new`: `父级层级（新）`}
				val := gconv.Map(v)
				pLevelOfOld := gconv.Uint(val[`p_level_of_old`])
				pLevelOfNew := gconv.Uint(val[`p_level_of_new`])
				updateData[daoThis.Columns().Level] = gdb.Raw(daoModel.DbTable + `.` + daoThis.Columns().Level + ` + ` + gconv.String(pLevelOfNew-pLevelOfOld))
				if pLevelOfNew < pLevelOfOld {
					updateData[daoThis.Columns().Level] = gdb.Raw(daoModel.DbTable + `.` + daoThis.Columns().Level + ` - ` + gconv.String(pLevelOfOld-pLevelOfNew))
				}
			case daoThis.Columns().ExtraData:
				if gconv.String(v) == `` {
					updateData[k] = nil
					continue
				}
				updateData[k] = v
			default:
				if daoThis.Contains(k) {
					updateData[k] = v
				}
			}
		}
		m = m.Data(updateData)
		if len(daoModel.AfterUpdate) == 0 {
			return m
		}
		m = m.Hook(daoThis.HookUpdate(daoModel))
		if len(updateData) == 0 {
			daoModel.IsOnlyAfterUpdate = true
		}
		return m
	}
}

// hook update
func (daoThis *menuDao) HookUpdate(daoModel *daoIndex.DaoModel) gdb.HookHandler {
	return gdb.HookHandler{
		Update: func(ctx context.Context, in *gdb.HookUpdateInput) (result sql.Result, err error) {
			if daoModel.IsOnlyAfterUpdate {
				result = driver.RowsAffected(0)
			} else {
				result, err = in.Next(ctx)
				if err != nil {
					return
				}
			}

			row, _ := result.RowsAffected()
			if row == 0 {
				return
			}

			for k, v := range daoModel.AfterUpdate {
				switch k {
				case `child_update_list`: //修改pid时，更新所有子孙级的ID路径，名称路径和层级。参数：[]map[string]any{`p_id_path_of_old`: `父级ID路径（旧）`, `child_id_path`: map[string]any{`p_id_path_of_old`: `父级ID路径（旧）`, `p_id_path_of_new`: `父级ID路径（新）`}, `child_name_path`: map[string]any{`p_name_path_of_old`: `父级名称路径（旧）`, `p_name_path_of_new`: `父级名称路径（新）`}, `child_level`: map[string]any{`p_level_of_old`: `父级层级（旧）`, `p_level_of_new`: `父级层级（新）`}}
					val := v.([]map[string]any)
					for _, v1 := range val {
						pIdPathOfOld := gconv.String(v1[`p_id_path_of_old`])
						delete(v1, `p_id_path_of_old`)
						daoModel.CloneNew().Filter(`p_id_path_of_old`, pIdPathOfOld).HookUpdate(v1).Update()
					}
				case `p_is_leaf`: //更新父级叶子。参数：父级ID
					daoModel.CloneNew().FilterPri(v).HookUpdateOne(daoThis.Columns().IsLeaf, 0).Update()
				case `p_is_leaf_check`: //更新原父级叶子。参数：[]{父级ID,...}
					pidArr, _ := daoModel.CloneNew().Filter(daoThis.Columns().Pid, v).Distinct().Array(daoThis.Columns().Pid)
					if idArr := gset.NewFrom(v).Diff(gset.NewFrom(gconv.Uints(pidArr))).Slice(); len(idArr) > 0 {
						daoModel.CloneNew().FilterPri(idArr).HookUpdateOne(daoThis.Columns().IsLeaf, 1).Update()
					}
				}
			}
			return
		},
	}
}

// hook delete
func (daoThis *menuDao) HookDelete(daoModel *daoIndex.DaoModel) gdb.HookHandler {
	return gdb.HookHandler{
		Delete: func(ctx context.Context, in *gdb.HookDeleteInput) (result sql.Result, err error) { //有软删除字段时需改成Update事件
			pIsLeafCheck := []uint{} //更新原父级叶子
			idPathArr, _ := daoModel.CloneNew().FilterPri(daoModel.IdArr).ArrayStr(daoThis.Columns().IdPath)
			for _, idPath := range idPathArr {
				if pIsLeafCheckTmp := gconv.Uints(gstr.Split(idPath, `-`)); len(pIsLeafCheckTmp) > 2 {
					pIsLeafCheck = append(pIsLeafCheck, pIsLeafCheckTmp[len(pIsLeafCheckTmp)-2])
				}
			}

			result, err = in.Next(ctx)
			if err != nil {
				return
			}

			row, _ := result.RowsAffected()
			if row == 0 {
				return
			}

			pidArr, _ := daoModel.CloneNew().Filter(daoThis.Columns().Pid, pIsLeafCheck).Distinct().Array(daoThis.Columns().Pid)
			if idArr := gset.NewFrom(pIsLeafCheck).Diff(gset.NewFrom(gconv.Uints(pidArr))).Slice(); len(idArr) > 0 {
				daoModel.CloneNew().FilterPri(idArr).HookUpdateOne(daoThis.Columns().IsLeaf, 1).Update()
			}
			/* // 对并发有要求时，可使用以下代码解决情形1。并发说明请参考：api/internal/dao/auth/scene.go中HookDelete方法内的注释
			RoleRelToMenu.CtxDaoModel(ctx).Filter(RoleRelToMenu.Columns().MenuId, daoModel.IdArr).Delete() */
			return
		},
	}
}

// 解析group
func (daoThis *menuDao) ParseGroup(group []string, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		for _, v := range group {
			switch v {
			case `id`:
				m = m.Group(daoModel.DbTable + `.` + daoThis.Columns().MenuId)
			default:
				if daoThis.Contains(v) {
					m = m.Group(daoModel.DbTable + `.` + v)
				} else {
					m = m.Group(v)
				}
			}
		}
		return m
	}
}

// 解析order
func (daoThis *menuDao) ParseOrder(order []string, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		for _, v := range order {
			v = gstr.Trim(v)
			kArr := gstr.Split(v, `,`)
			k := gstr.Split(kArr[0], ` `)[0]
			switch k {
			case `id`:
				m = m.Order(daoModel.DbTable + `.` + gstr.Replace(v, k, daoThis.Columns().MenuId, 1))
			case `tree`:
				m = m.OrderAsc(daoModel.DbTable + `.` + daoThis.Columns().Level)
				m = m.OrderDesc(daoModel.DbTable + `.` + daoThis.Columns().Sort)
				m = m.OrderAsc(daoModel.DbTable + `.` + daoThis.Columns().CreatedAt)
				m = m.OrderAsc(daoModel.DbTable + `.` + daoThis.Columns().MenuId)
			case daoThis.Columns().Level:
				m = m.Order(daoModel.DbTable + `.` + v)
				m = m.OrderDesc(daoModel.DbTable + `.` + daoThis.Columns().CreatedAt)
				m = m.OrderDesc(daoModel.DbTable + `.` + daoThis.Columns().MenuId)
			case daoThis.Columns().Sort:
				m = m.Order(daoModel.DbTable + `.` + v)
				m = m.OrderDesc(daoModel.DbTable + `.` + daoThis.Columns().CreatedAt)
				m = m.OrderDesc(daoModel.DbTable + `.` + daoThis.Columns().MenuId)
			default:
				if daoThis.Contains(k) {
					m = m.Order(daoModel.DbTable + `.` + v)
				} else {
					m = m.Order(v)
				}
			}
		}
		return m
	}
}

// 解析join
func (daoThis *menuDao) ParseJoin(joinTable string, daoModel *daoIndex.DaoModel) gdb.ModelHandler {
	return func(m *gdb.Model) *gdb.Model {
		if _, ok := daoModel.JoinTableMap[joinTable]; ok {
			return m
		}
		daoModel.JoinTableMap[joinTable] = struct{}{}
		switch joinTable {
		/* case Xxxx.ParseDbTable(m.GetCtx()):
		m = m.LeftJoin(joinTable, joinTable+`.`+Xxxx.Columns().XxxxId+` = `+daoModel.DbTable+`.`+daoThis.Columns().XxxxId)
		// m = m.LeftJoin(Xxxx.ParseDbTable(m.GetCtx())+` AS `+joinTable, joinTable+`.`+Xxxx.Columns().XxxxId+` = `+daoModel.DbTable+`.`+daoThis.Columns().XxxxId) */
		case Scene.ParseDbTable(m.GetCtx()):
			m = m.LeftJoin(joinTable, joinTable+`.`+Scene.Columns().SceneId+` = `+daoModel.DbTable+`.`+daoThis.Columns().SceneId)
		case `p_` + daoModel.DbTable:
			m = m.LeftJoin(daoModel.DbTable+` AS `+joinTable, joinTable+`.`+daoThis.Columns().MenuId+` = `+daoModel.DbTable+`.`+daoThis.Columns().Pid)
		case RoleRelToMenu.ParseDbTable(m.GetCtx()):
			m = m.LeftJoin(joinTable+` AS `+joinTable, joinTable+`.`+RoleRelToMenu.Columns().MenuId+` = `+daoModel.DbTable+`.`+daoThis.Columns().MenuId)
		default:
			m = m.LeftJoin(joinTable, joinTable+`.`+daoThis.Columns().MenuId+` = `+daoModel.DbTable+`.`+daoThis.Columns().MenuId)
		}
		return m
	}
}

// Add your custom methods and functionality below.

func (daoThis *menuDao) CacheSet(ctx context.Context) {
	daoModel := daoThis.CtxDaoModel(ctx)
	list, _ := daoModel.Fields(append(daoThis.ColumnArr(), `id`, `label`, `tree`, `show_menu`)...).All()
	listMap := map[string]gdb.Result{}
	for _, info := range list {
		sceneId := info[daoThis.Columns().SceneId].String()
		delete(info, daoThis.Columns().SceneId)
		if _, ok := listMap[sceneId]; !ok {
			listMap[sceneId] = gdb.Result{}
		}
		listMap[sceneId] = append(listMap[sceneId], info)
	}
	for sceneId, list := range listMap {
		cache.DbDataLocal.Set(ctx, daoModel, `scene_id_`+sceneId, list.Json())
	}
}

func (daoThis *menuDao) CacheGetList(ctx context.Context, sceneId string) (list gdb.Result, err error) {
	list, _ = cache.DbDataLocal.GetList(ctx, daoThis.CtxDaoModel(ctx), `scene_id_`+sceneId)
	if len(list) == 0 {
		list, err = daoThis.CtxDaoModel(ctx).Fields(append(daoThis.ColumnArr(), `id`, `label`, `tree`, `show_menu`)...).Filter(daoThis.Columns().SceneId, sceneId).All()
	}
	return
}

func (daoThis *menuDao) CacheGetListOfNoStop(ctx context.Context, sceneId string) (list gdb.Result, err error) {
	listOfAll, err := daoThis.CacheGetList(ctx, sceneId)
	if err != nil {
		return
	}
	for _, info := range listOfAll {
		if info[daoThis.Columns().IsStop].Uint() == 0 {
			list = append(list, info)
		}
	}
	return
}

func (daoThis *menuDao) CacheGetListOfSelf(ctx context.Context, sceneId string, loginId *gvar.Var) (list gdb.Result, err error) {
	listTmp, err := daoThis.CacheGetListOfNoStop(ctx, sceneId)
	if err != nil {
		return
	}
	roleIdArr, err := Role.GetRoleIdArrOfSelf(ctx, sceneId, loginId)
	if err != nil || len(roleIdArr) == 0 {
		return
	}
	menuIdArr, err := Role.CacheGetMenuIdArr(ctx, roleIdArr...)
	if err != nil || len(menuIdArr) == 0 {
		return
	}
	for _, menuId := range menuIdArr {
		for _, info := range listTmp {
			if menuId == info[daoThis.Columns().MenuId].Uint() {
				list = append(list, info)
				break
			}
		}
	}
	return
}
