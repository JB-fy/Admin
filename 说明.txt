    SQL语法顺序：select->from->where->group by->having->order by->limit
    SQL执行顺序：from->where->group by->having->select->order by->limit


框架使用说明：
    启动服务
        php bin/hyperf.php start
        php bin/hyperf.php server:watch //热更新
    快速生成模型类(--pool对应哪个库)
        php bin/hyperf.php gen:model --pool=default
    快速生成Dao类（先修改AbstractDao继承自\Hyperf\DbConnection\Model\Model，再注释掉冲突的方法），生成后再自己修改
        php bin/hyperf.php gen:model --pool=default --path=app/Module/Db/Dao --inheritance=AbstractDao --uses='App\Module\Db\Dao\AbstractDao'
    
框架使用规范：
    1：使用容器和依赖注入功能时，需要特别注意对象是否含有状态。以下为带有状态的类
        app\Module\Db\Dao内的类（内部的属性几乎都含有状态）
        app\Module\Db\Model内的类（如果继承\Hyperf\DbConnection\Model\Model模型的话，且要切换连接或表时，$connection和$table带有状态）
        app\Module\Cache内的类（当要切换连接时，$cache带有状态）
    2：禁止在任何地方使用app\Module\Db\Model类，防止改变其状态，否则会对app\Module\Db\Dao的使用造成影响
    3：只使用app\Module\Db\Dao或Hyperf\DbConnection\Db做数据库处理
    4：app\Module\Db\Dao文件夹内的类统一使用getDao方法实例化
    5：app\Module\Cache文件夹内的类统一使用getCache方法实例化




    /* const vMyDirective = {
        updated: (el) => {
            const dropId = el.querySelector('.el-tooltip__trigger').getAttribute('aria-describedby')
            if (dropId) {
                const currentDom = document.getElementById(dropId).querySelector('.el-select-dropdown__list');
                if (currentDom) {
                    currentDom.addEventListener('scroll', () => {
                        if (currentDom.scrollHeight - currentDom.scrollTop <= currentDom.clientHeight) {
    
                        }
                    });
                }
            }
        }
    } */
    const sceneIdSelect = reactive({
        ref: null as any,
        loading: false,
        isEnd: false,
        data: [],
        param: {
            field: ['id', 'sceneName'],
            where: {} as { [propName: string]: any },
            order: { id: 'desc' },
            page: 1,
            limit: 0
        },
        setData: () => {
            if (sceneIdSelect.loading) {
                return
            }
            if (sceneIdSelect.isEnd) {
                return
            }
            sceneIdSelect.loading = true
            request('auth/scene/list', sceneIdSelect.param).then((res) => {
                /* sceneIdSelect.data = res.data.list.map((item: any) => {
                    return {
                        value: item.sceneId,
                        label: item.sceneName
                    }
                }) */
                if (sceneIdSelect.param.limit === 0 || res.data.list.length < sceneIdSelect.param.limit) {
                    sceneIdSelect.isEnd = true
                }
                res.data.list.forEach((item: any) => {
                    sceneIdSelect.data.push({
                        value: item.sceneId,
                        label: item.sceneName
                    })
                })
                if (sceneIdSelect.param.page === 1) {
                    nextTick(() => {
                        const scrollDom = sceneIdSelect.ref.popperRef.querySelector('.el-select-dropdown__list')
                        console.log(scrollDom)
                        if (scrollDom) {
                            const scrollFunc = () => {
                                console.log(scrollDom.scrollTop)    //0-150
                                //console.log(scrollDom.scrollHeight) //300
                                //console.log(scrollDom.clientHeight) //150
                                if (scrollDom.scrollHeight - scrollDom.scrollTop <= scrollDom.clientHeight) {
                                    sceneIdSelect.param.page++
                                    sceneIdSelect.setData()
                                }
                            }
                            //scrollDom.removeEventListener('scroll', scrollFunc)
                            scrollDom.addEventListener('scroll', scrollFunc)
                        }
                    })
                }
            }).catch(() => {
            }).finally(() => {
                sceneIdSelect.loading = false
            })
        },
        watch: {
            sceneId: watch(() => saveCommon.data.sceneId, (newValue, oldValue) => {
                if (newValue > 0 && !oldValue) {
                    sceneIdSelect.setData()
                }
            })
        },
        visibleChange: (val: boolean) => {
            //if (val && sceneIdSelect.data.length == 0) {    //只在首次打开加载。但用户切换页面做数据变动，再返回时，需要刷新页面清理缓存才能获取最新数据
            if (val) {  //每次打开都加载
                delete sceneIdSelect.param.where.sceneName
                sceneIdSelect.data = []
                sceneIdSelect.param.page = 1
                sceneIdSelect.isEnd = false
                sceneIdSelect.setData()
            }
        },
        remoteMethod: (keyword: string) => {
            if (keyword) {
                sceneIdSelect.param.where.sceneName = keyword
            } else {
                delete sceneIdSelect.param.where.sceneName
            }
            sceneIdSelect.data = []
            sceneIdSelect.param.page = 1
            sceneIdSelect.isEnd = false
            sceneIdSelect.setData()
        }
    })



    <ElSelectV2 :ref="(el: any) => { sceneIdSelect.ref = el }" v-model="saveCommon.data.sceneId"
    :placeholder="t('view.auth.scene.sceneId')" :options="sceneIdSelect.data" :clearable="true"
    :filterable="true" @visible-change="sceneIdSelect.visibleChange" :remote="true"
    :remote-method="sceneIdSelect.remoteMethod" :loading="sceneIdSelect.loading" />