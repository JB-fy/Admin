依赖：yum install gcc gcc-c++ cmake make ncurses-devel rpcgen patchelf libtirpc-devel
    1：创建mysql的安装目录及配置文件目录,数据库存放目录,日志目录
        mkdir -p /server/tool/mysql-8.0.33/data /server/tool/mysql-8.0.33/conf /server/tool/mysql-8.0.33/log /server/tool/mysql-8.0.33/run
    2：解压mysql压缩包并进入解压的文件夹内编译安装
        tar -xvf mysql-boost-8.0.33.tar.gz
报错处理：
    错误：Not a supported openssl version in WITH_SSL=system.
    原因：centos9系统自带的openssl版本太高，需要装低版本1.1.1
        wget https://www.openssl.org/source/openssl-1.1.1q.tar.gz
        yum install perl
        tar -xvf openssl-1.1.1q.tar.gz
        cd openssl-1.1.1q
        ./config --prefix=/server/openssl
        make && make install
        再在cmake时指定-DWITH_SSL=/server/openssl

    错误：Could not find SASL
    原因：centos9系统更新yum源后才能安装patchelf包
        yum -y install epel-release
        yum -y install patchelf

    错误：Package 'libtirpc', required by 'virtual:world', not found
    原因：centos9系统yum没有libtirpc-devel安装包，需手动安装
        wget http://mirror.stream.centos.org/9-stream/CRB/x86_64/os/Packages/libtirpc-devel-1.3.2-1.el9.x86_64.rpm
        yum localinstall libtirpc-devel-1.3.2-1.el9.x86_64.rpm

        //5.7版本建议添加-DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci
        //5.7版本以上必须添加-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/server/mysql-8.0.33/boost
        cmake -DCMAKE_INSTALL_PREFIX=/server/tool/mysql-8.0.33 -DMYSQL_DATADIR=/server/tool/mysql-8.0.33/data -DSYSCONFDIR=/server/tool/mysql-8.0.33/conf -DMYSQL_UNIX_ADDR=/server/tool/mysql-8.0.33/mysql.sock -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/server/mysql-8.0.33/boost -DFORCE_INSOURCE_BUILD=1 -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DWITH_SSL=/server/openssl -DDEFAULT_CHARSET=utf8mb4 -DDEFAULT_COLLATION=utf8mb4_general_ci
    3、运行安装命令
        make && make install
    4、新建配置文件（多版本要改端口）：
        vi /server/tool/mysql-8.0.33/conf/my.cnf
[mysqld]
#服务id（集群时必须唯一，建议为IP最后一个数字。5.7版本设置log-bin后，该值也必须设置）
server-id=200
#mysql以什么用户运行
user=mysql
#mysql运行在哪个端口
port=3306
#mysql的数据目录
datadir=/server/tool/mysql-8.0.33/data
#mysql以socket方式运行的sock文件位置
socket=/server/tool/mysql-8.0.33/mysql.sock
#错误日志位置
log-error=/server/tool/mysql-8.0.33/log/mysqld-error.log
#进程文件位置
pid-file=/server/tool/mysql-8.0.33/run/mysqld.pid
#主库设置，指同步日志的文件名,默认在data目录下，也可直接指定一个路径
log-bin=/server/tool/mysql-8.0.33/log/mysql-bin
#sql_mode设置mysql运行模式
#STRICT_TRANS_TABLES    开启严格模式，没有默认值或字符串超过规定长度时会报错
#ERROR_FOR_DIVISION_BY_ZERO     零除操作会插入null，但会产生警告，如果同时启用严格模式，则会产生错误
#NO_ZERO_DATE,NO_ZERO_IN_DATE   插入0000-00-00 00:00:00时间格式时，但会产生警告，如果同时启用严格模式，则会产生错误
#NO_ENGINE_SUBSTITUTION     当create table或alert table语句指定表存储引擎不存在时会报错
#ONLY_FULL_GROUP_BY     group by后面的除聚合函数外的字段，必须在select中出现。不建议启用
#NO_AUTO_CREATE_USER    禁止grant语句自动创建用户，除非使用identified by或identified with包含一个非空的密码。5.7版本可选，8版本取消了
sql_mode=STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ZERO_DATE,NO_ZERO_IN_DATE,NO_ENGINE_SUBSTITUTION
#是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启
#symbolic-links=0
#mysql最大接受的数据包大小
max_allowed_packet=1024M
#使用GROUP_CONCAT函数时，返回结果默认限制1024长度，超出部分会丢失。建议设置大点，防止数据丢失
group_concat_max_len = 102400
    5、初始化数据库（初始化后会生成默认密码，请记录下来）
        //创建用户组，用户并改变文件所属用户组和用户
        groupadd mysql
        useradd -r -g mysql -s /bin/false mysql
        chown -R mysql:mysql /server/tool/mysql-8.0.33
        //“initialize”会生成一个随机密码，而”initialize-insecure”不会生成密码
        /server/tool/mysql-8.0.33/bin/mysqld --user=mysql --initialize-insecure
        //安装ssl
        /server/tool/mysql-8.0.33/bin/mysql_ssl_rsa_setup
    6、编辑自启动文件
        vi /etc/systemd/system/mysql-8.0.33.service
[Unit]
Description=mysql-8.0.33
After=network.target
[Service]
Type=forking
PIDFile=/server/tool/mysql-8.0.33/run/mysqld.pid
ExecStart=/server/tool/mysql-8.0.33/support-files/mysql.server start
ExecReload=/server/tool/mysql-8.0.33/support-files/mysql.server reload
ExecStop=/server/tool/mysql-8.0.33/support-files/mysql.server stop
PrivateTmp=true
[Install]
WantedBy=multi-user.target
    7、设置自启动
        systemctl enable mysql-8.0.33
    8、启动mysql
        /server/tool/mysql-8.0.33/support-files/mysql.server start
        //登录数据库
        /server/tool/mysql-8.0.33/bin/mysql -uroot -p
        //修改密码
        ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
        //创建远程登录用户并授权
        CREATE USER 'root'@'%' IDENTIFIED BY '123456';
        GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
        //mysql8版本支持账号使用mysql5版本登录数据库的验证方式（需要时才做）
        ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';
        //刷新MySQL的系统权限相关表（新建mysql用户立即生效）
        FLUSH PRIVILEGES;
        //退出数据库
        EXIT;
    9、设置环境变量增加以下目录（参考linux常用命令）
        /server/tool/mysql-8.0.33/bin
    10、服务器对外开放3306端口（需要重启防火墙生效）
        firewall-cmd --zone=public --add-port=3306/tcp --permanent


/**--------------------------------mysql解压安装 开始--------------------------------**/
    安装依赖
        yum -y install libaio libncurses*
    解压安装包
        tar -xvf mysql-8.0.33-linux-glibc2.17-x86_64-minimal.tar.xz
    解压目录移动到指定目录（因为解压目录内的support-files/mysql.server文件是mysql的启动文件，文件内默认安装目录是/usr/local/mysql，所以需移动到该目录。如不想使用该目录，修改启动文件内的该目录地址，有多处需要修改）
        mv /server/mysql-8.0.33-linux-glibc2.17-x86_64-minimal /usr/local/mysql
    创建日志目录
        mkdir -p /usr/local/mysql/log
    创建my.cnf配置文件（因为默认配置文件按以下顺序依次查找：/etc/my.cnf，/etc/mysql/my.cnf，/usr/local/mysql/etc/my.cnf，~/.my.cnf，所以需创建/etc/my.cnf文件）
        vi /etc/my.cnf
[mysqld]
#mysql以什么用户运行
user=mysql
#mysql运行在哪个端口
port=3306
#mysql的数据目录
datadir=/usr/local/mysql/data
#mysql以socket方式运行的sock文件位置（设置这个会导致解压版报错）
#socket=/usr/local/mysql/mysql.sock
#错误日志位置
log-error=/usr/local/mysql/log/mysqld-error.log
#进程文件位置（设置这个会导致解压版报错）
#pid-file=/usr/local/mysql/run/mysqld.pid
#主库设置，指同步日志的文件名,默认在data目录下，也可直接指定一个路径
log-bin=/usr/local/mysql/log/mysql-bin

#是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启
#symbolic-links=0
#mysql最大接受的数据包大小
max_allowed_packet=1024M
#sql_mode模式，定义了你MySQL应该支持的sql语法，对数据的校验等等，限制一些所谓的‘不合法’的操作。mysql8取消了NO_AUTO_CREATE_USER
sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
    创建用户和用户组并授权
        groupadd mysql
        useradd -r -g mysql -s /bin/false mysql
        chown -R mysql:mysql /usr/local/mysql
    初始化数据库（初始化后会生成默认密码，请记录下来）
        //“initialize”会生成一个随机密码，而”initialize-insecure”不会生成密码
        /usr/local/mysql/bin/mysqld --user=mysql --initialize-insecure
        //安装ssl（解压目录移动到指定目录这步如果目录改变则此处会报路径错）
        /usr/local/mysql/bin/mysql_ssl_rsa_setup
    设置开机自启动
        ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld-8.0.33
        chkconfig --add mysqld-8.0.33
        chkconfig mysqld-8.0.33 on
    设置环境变量增加以下目录（参考linux常用命令）
        /usr/local/mysql/bin
    启动mysql
        service mysqld-8.0.33 start
        //登录数据库
        mysql -uroot -p
        //修改密码
        ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
        //创建远程登录用户并授权（mysql8执行会报错，需分两步执行）
        //GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
        CREATE USER 'root'@'%' IDENTIFIED BY '123456';
        GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
        //刷新MySQL的系统权限相关表（新建mysql用户立即生效）
        FLUSH PRIVILEGES;
        //退出数据库
        EXIT;
    服务器对外开放3306端口（需要重启防火墙生效）
        firewall-cmd --zone=public --add-port=3306/tcp --permanent
        systemctl restart firewalld
/**--------------------------------mysql解压安装 结束--------------------------------**/



/**--------------------------------配置说明 开始--------------------------------**/
[client]
#mysql默认密码
#password=88888888
#mysql以socket方式运行的sock文件位置
socket=/server/webtool/mysql-8.0.19/mysql.sock

[mysqld_safe]
#进程文件位置
pid-file=/server/webtool/mysql-8.0.19/run/mysqld.pid
#错误日志位置
log-error=/server/webtool/mysql-8.0.19/log/mysqld-error.log

[mysqld]
#mysql以什么用户运行
user=mysql
#mysql运行在哪个端口
port=3306
#服务id（唯一，建议为IP最后一个数字）
server-id=160
#mysql的数据目录
datadir=/server/webtool/mysql-8.0.19/data
#mysql以socket方式运行的sock文件位置
socket=/server/webtool/mysql-8.0.19/mysql.sock
#是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启
#symbolic-links=0

#mysql监听的ip地址，如果是127.0.0.1，表示仅本机访问
#bind_address=127.0.0.1
#数据修改是否自动提交，为0不自动提交
#autocommit=1
#服务器使用的字符集
#character_set_server=utf8mb4
#禁用DNS主机名查找，启用以后用内网地址向mysqlslap请求响应快了一半
#skip_name_resolve=1
#mysql最大连接数
#max_connections=1000
#某台host连接错误次数等于max_connect_errors（默认10），主机'host_name'再次尝试时被屏蔽。可有效防止dos攻击
#max_connect_errors=100
#数据库事务隔离级别：REPEATABLE-READ(可重读，默认) READ-UNCOMMITTED(读取未提交内容) READ-COMMITTED(读取提交内容) SERIERLIZED(可串行化)
#transaction_isolation=READ-COMMITTED
#mysql中TIMESTAMP类型和其它的类型有点不一样(在没有设置explicit_defaults_for_timestamp=1的情况下）
#explicit_defaults_for_timestamp=1
#当我们的join是ALL,index,rang或者Index_merge的时候使用的buffer。 实际上这种join被称为FULL JOIN
#join_buffer_size=128M
#规定了内部内存临时表的最大值，每个线程都要分配。（实际起限制作用的是tmp_table_size和max_heap_table_size的最小值。）如果内存临时表超出了限制，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下
#tmp_table_size=128M
#保存临时文件的目录
#tmpdir=/dev/shm
#不区分大小写
#lower_case_table_names=1
#mysql最大接受的数据包大小
max_allowed_packet=1024M
#sql_mode模式，定义了你MySQL应该支持的sql语法，对数据的校验等等，限制一些所谓的‘不合法’的操作
sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER
#服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端
#interactive_timeout=60
#服务器关闭非交互连接之前等待活动的秒数，在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)
#wait_timeout=60
#读入缓冲区的大小，将对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区
#read_buffer_size=16M
#随机读缓冲区大小，当按任意顺序读取行时（列如按照排序顺序）将分配一个随机读取缓冲区，进行排序查询时，MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度
#read_rnd_buffer_size=32M
#是一个connection级参数，在每个connection第一次需要使用这个buffer的时候，一次性分配设置的内存
#sort_buffer_size=32M

#进程文件位置
pid-file=/server/webtool/mysql-8.0.19/run/mysqld.pid
#错误日志位置
log-error=/server/webtool/mysql-8.0.19/log/mysqld-error.log
#是否开启慢查询日志收集
#slow_query_log=1
#慢查询日志位置
#slow_query_log_file=/server/webtool/mysql-8.0.19/log/mysql-slow.log
#是否记录未使用索引的语句
#log_queries_not_using_indexes=1
#慢查询也记录那些慢的optimize table，analyze table和alter table语句
#log_slow_admin_statements=1
#记录由Slave所产生的慢查询
#log_slow_slave_statements=1
#设定每分钟记录到日志的未使用索引的语句数目，超过这个数目后只记录语句数量和花费的总时间
#log_throttle_queries_not_using_indexes=10
#设置记录慢查询超时时间
#long_query_time=1
#查询检查返回时，少于该参数行数的SQL不被记录到慢查询日志
#min_examined_row_limit=100
#日志自动过期清理天数
#expire_logs_days=90

#启用gtid类型，否则就是普通的主从复制架构，开启这个模式时，从库也必须设置log-bin
#gtid_mode=on
#强制GTID的一致性
#enforce-gtid-consistency=1
#log-bin的保存位置，不能指定确定的文件名如mysql-bin.log，只能指定位置和前缀，会生成以前缀为开头的一系列文件
#log-bin=/server/webtool/mysql-5.7.22/log/mysql-bin
#binlog日志格式，可选值“MIXED”、“ROW”、“STATEMENT”，在5.6版本之前默认为“STATEMENT”，5.6之后默认为“MIXED”；因为“STATEMENT”方式在处理一些“不确定”性的方法时会造成数据不一致问题，我们建议使用“MIXED”或者“ROW”
#binlog_format=ROW
#这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。默认sync_binlog=0。也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。具体值说明如下：sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
#sync_binlog=4
#同步日志使用的内存大小
#binlog_cache_size=1M
#slave保存同步中继日志的位置
#relay_log=/server/webtool/mysql-8.0.19/log/mysql-relay
#当slave宕机后，假如relay-log损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的relay-log，并且重新从master上获取日志，这样就保证了relay-log的完整性
#relay_log_recovery=1
#不再需要中继日志时，是否自动清空。默认为1
#relay_log_purge=1
#从库设置，设置为只读，防止从库数据修改后，主从数据不一致，但是有超级权限的账号还是有写的权限，所以要某个账号只读的话，可以去掉账号的超级权限
#read_only=1
#master设置，不需要记录到同步日志的库
#binlog-ignore-db=information_schema
#binlog-ignore-db=mysql
#binlog-ignore-db=performance_schema
#binlog-ignore-db=sys
#master设置，需要记录到同步日志的库
#binlog-do-db=
#slave设置，不需要同步的库
#replicate-ignore-db=information_schema
#replicate-ignore-db=mysql
#replicate-ignore-db=performance_schema
#replicate-ignore-db=sys
#slave设置，需要同步的库
#replicate-do-db=
#slave设置，不需要同步的库.表(%表示库内的全部表)
#replicate-wild-ignore-table = 数据库名字.表名字
#slave设置，需要同步的库.表(%表示库内的全部表)
#replicate-wild-do-table = 数据库名字.表名字
#slave更新是否记入日志，在做双主架构时异常重要，影响到双主架构是否能互相同步（当msyql同时是主库也是从库时，需要设置）
#log_slave_updates=1
#这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快
#binlog_gtid_simple_recovery=1
#跳过指定error no类型的错误，设成all 跳过所有错误
#slave-skip-errors=ddl_exist_errors
#设置为1时，slave复制不随mysql启动而启动，防止服务器意外重启，主从复制时容易造成1062的错误
#skip-slave-start=1
#主从复制时，网络中断，主从都没有察觉，从库等待该时间后（默认3600秒），才会认为网络故障，发起重连并同步这段时间的数据
#slave_net_timeout=60
#主从网络中断等待重连的时间，默认60秒
#master_connect_retry=
#检测到网络中断后，从数据库尝试重连主数据库的次数
#master_retry_count=

# 该参数设定了事务提交时内存中log信息的处理。0：日志缓冲每秒一次地被写到日志文件，并且对日志文件做到磁盘操作的刷新。任何mysqld进程的崩溃会删除崩溃前最后一秒的事务。1：在每个事务提交时，日志缓冲被写到日志文件，对日志文件做到磁盘操作的刷新。Truly ACID。速度慢。2：在每个事务提交时，日志缓冲被写到文件， 但不对日志文件做到磁盘操作的刷新。只有操作系统崩溃或掉电才会删除最后一秒的事务，不然不会丢失事务。0性能最佳，但安全性最差。1性能最差，但安全性最高。2两者兼顾。
#innodb_flush_logs_at_trx_commit=2
#innodb每个数据页大小，这个参数在一开始初始化时就要加入my.cnf里，如果已经创建了表，再修改，启动MySQL会报错
#innodb_page_size=16K
#缓存innodb表的索引，数据，插入数据时的缓冲，专用mysql服务器设置的大小：操作系统内存的70%-80%最佳
#innodb_buffer_pool_size=4G
#可以开启多个内存缓冲池，把需要缓冲的数据hash到不同的缓冲池中，这样可以并行的内存读写
#innodb_buffer_pool_instances=8
#InnoDB kernel并发最大的线程数。1:最少设置为(num_disks+num_cpus)*2。2:可以通过设置成1000来禁止这个限制
#innodb_thread_concurrency=64
#指定表数据和索引存储的空间，可以是一个或者多个文件。最后一个数据文件必须是自动扩充的，也只有最后一个文件允许自动扩充。这样，当空间用完后，自动扩充数据文件就会自动增长(以8MB为单位)以容纳额外的数据。例如：下面配置将两个数据文件放在不同的磁盘上。数据首先放在ibdata1中，当达到900M以后，数据就放在ibdata2中。一旦达到50MB，ibdata2将以 8MB为单位自动增长。如果磁盘满了，需要在另外的磁盘上面增加一个数据文件。
#innodb_data_file_path=/disk1/ibdata1:900M;/disk2/ibdata2:50M:autoextend
#放置表空间数据的目录，默认在mysql的数据目录，设置到和MySQL安装文件不同的分区可以提高性能。
#innodb_data_home_dir=/server/tool/mysqlData
#1：使用fsync()。2：O_SYNC 以sync模式打开文件，通常比较慢。3：O_DIRECT，在Linux上使用Direct IO。可以显著提高速度，特别是在RAID系统上。避免额外的数据复制和double buffering(mysql buffering 和OS buffering)。默认值为fsync()
#innodb_flush_method=O_DIRECT
#这个值定义了日志文件的大小，innodb日志文件的作用是用来保存redo日志。一个事务对于数据或索引的修改往往对应到表空间中的随机的位置，因此当刷新这些修改到磁盘中就会引起随机的I/O，而随机的I/O往往比顺序的I/O更加昂贵的开销，因为随机的I/O需要更多的开销来定位到指定的位置。innodb使用日志来将随机的I/O转为顺序的I/O，只要日志文件是安全的，那么事务就是永久的，尽管这些改变还没有写到数据文件中，如果出现了当机或服务器断电的情况，那么innodb也可以通过日志文件来恢复以及提交的事务。但是日志文件是有一定的大小的，所以必须要把日志文件记录的改变写到数据文件中，innodb对于日志文件的操作是循环的，即当日志文件写满后，会将指针重新移动到文件开始的地方重新写，但是它不会覆盖那些还没有写到数据文件中的日志，因为这是唯一记录了事务持久化的记录。如果对Innodb数据表有大量的写入操作，那么选择合适的innodb_log_file_size值对提升MySQL性能很重要。然而设置太大了，就会增加恢复的时间，因此在MySQL崩溃或者突然断电等情况会令MySQL服务器花很长时间来恢复。该参数太小了影响查询性能，一般取256M可以兼顾性能和恢复的速度
#innodb_log_file_size=1G
#事务在内存中的缓冲。分配原则：控制在2-8M.这个值不用太多的。他里面的内存一般一秒钟写到磁盘一次
#innodb_log_buffer_size=6M
#默认为关闭OFF。如果开启该参数，启动MySQL服务时，MySQL将本地热数据加载到InnoDB缓冲池中
#innodb_buffer_pool_load_at_startup=1
#默认为关闭OFF。如果开启该参数，停止MySQL服务时，InnoDB将InnoDB缓冲池中的热数据保存到本地硬盘
#innodb_buffer_pool_dump_at_shutdown=1
#根据 官方文档 描述，它会影响page cleaner线程每次刷脏页的数量，这是一个每1秒 loop一次的线程
#innodb_lru_scan_depth=2000
#事务等待获取资源等待的最长时间，超过这个时间还未分配到资源则会返回应用失败；参数的时间单位是秒
#innodb_lock_wait_timeout=5
#这两个设置会影响InnoDB每秒在后台执行多少操作.大多数写IO(除了写InnoDB日志)是后台操作的. 如果你深度了解硬件性能(如每秒可以执行多少次IO操作),则使用这些功能是很可取的,而不是让它闲着
#innodb_io_capacity=4000
#innodb_io_capacity_max=8000
#innodb重做日志保存目录
#innodb_log_group_home_dir=/server/webtool/mysql-8.0.19/log/redolog/
#innodb回滚日志保存目录
#innodb_undo_directory=/server/webtool/mysql-8.0.19/log/undolog/
#undo回滚段的数量，至少大于等于35，默认128
#innodb_undo_logs=128
#用于设定创建的undo表空间的个数，在mysql_install_db时初始化后，就再也不能被改动了；默认值为0，表示不独立设置undo的tablespace，默认记录到ibdata中；否则，则在undo目录下创建这么多个undo文件，例如假定设置该值为4，那么就会创建命名为undo001~undo004的undo tablespace文件，每个文件的默认大小为10M。修改该值会导致Innodb无法完成初始化，数据库无法启动，但是另两个参数可以修改
#innodb_undo_tablespaces=0
#InnoDB存储引擎在刷新一个脏页时，会检测该页所在区(extent)的所有页，如果是脏页，那么一起刷新。这样做的好处是通过AIO可以将多个IO写操作合并为一个IO操作。对于传统机械硬盘建议使用，而对于固态硬盘可以关闭。
#innodb_flush_neighbors=1
#控制是否使用，使用几个独立purge线程（清除二进制日志）
#innodb_purge_threads=4
#mysql在5.6之前一直都是单列索引限制767，起因是256×3-1。这个3是字符最大占用空间（utf8）。但是在5.6以后，开始支持4个字节的uutf8。255×4>767, 于是增加了这个参数。这个参数默认值是OFF。当改为ON时，允许列索引最大达到3072
#innodb_large_prefix=OFF
#是否将死锁相关信息保存到MySQL错误日志中
#innodb_print_all_deadlocks=1
#开启InnoDB严格检查模式，尤其采用了页数据压缩功能后，最好是开启该功能。开启此功能后，当创建表（CREATE TABLE）、更改表（ALTER TABLE）和创建索引（CREATE INDEX）语句时，如果写法有错误，不会有警告信息，而是直接抛出错误，这样就可直接将问题扼杀在摇篮里
#innodb_strict_mode=1
#ORDER BY 或者GROUP BY 操作的buffer缓存大小
#innodb_sort_buffer_size=64M

#指定mysql的插件目录
#plugin_dir=/data/local/mysql-5.7.19/lib/plugin
#指定载入哪些插件
#plugin_load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
#控制master是否开启semisync
#loose_rpl_semi_sync_master_enabled=1
#控制slave是否开启semisync
#loose_rpl_semi_sync_slave_enabled=1
#单位毫秒，防止半同步复制在没有收到确认的情况下，发送堵塞。master在超时之前没有收到确认，将恢复到异步复制，继续执行半同步没有进行的操作
#loose_rpl_semi_sync_master_timeout=5000

[mysqld-5.7]
#表示转储每个bp instance LRU上最热的page的百分比。通过设置该参数可以减少转储的page数
#innodb_buffer_pool_dump_pct=40
#为了提升扩展性和刷脏效率，在5.7.4版本里引入了多个page cleaner线程。从而达到并行刷脏的效果。在该版本中，Page cleaner并未和buffer pool绑定，其模型为一个协调线程+多个工作线程，协调线程本身也是工作线程。因此如果innodb_page_cleaners设置为8，那么就是一个协调线程，加7个工作线程
#innodb_page_cleaners=4
#是否开启在线回收（收缩）undo log日志文件，支持动态设置
#innodb_undo_log_truncate=1
#当超过这个阀值（默认是1G），会触发truncate回收（收缩）动作，truncate后空间缩小到10M
#innodb_max_undo_log_size=2G
#控制回收（收缩）undo log的频率。undo log空间在它的回滚段没有得到释放之前不会收缩， 想要增加释放回滚区间的频率，就得降低设定值
#innodb_purge_rseg_truncate_frequency=128
#这个参数控制了当mysql启动或重启时，mysql在搜寻GTIDs时是如何迭代使用binlog文件的。 这个选项设置为真，会提升mysql执行恢复的性能。因为这样mysql-server启动和binlog日志清理更快。该参数为真时，mysql-server只需打开最老的和最新的这2个binlog文件
#binlog_gtid_simple_recovery=1
#在MySQL 5.7.2 新增了log_timestamps这个参数，该参数主要是控制error log、genera log，等等记录日志的显示时间参数。在5.7.2之后改参数为默认UTC这样会导致日志中记录的时间比中国这边的慢，导致查看日志不方便。修改为SYSTEM就能解决问题
#log_timestamps=system
#这个神奇的参数5.7.6版本引入，用于定义一个记录事务的算法，这个算法使用hash标识来记录事务。如果使用MGR，那么这个hash值需要用于分布式冲突检测何处理，在64位的系统，官网建议设置该参数使用 XXHASH64 算法。如果线上并没有使用该功能，应该设为off
#transaction_write_set_extraction=MURMUR32
#从mysql5.7.6开始information_schema.global_status已经开始被舍弃，为了兼容性，此时需要打开 show_compatibility_56
#show_compatibility_56=on
/**--------------------------------配置说明 结束--------------------------------**/




/**--------------------------------主从配置 结束--------------------------------**/
注意：主从设置完成前必须先把两个数据库数据同步
#服务id（唯一，建议为IP最后一个数字）
server-id=160
#设置日志的过期天数
#expire_logs_days=7
#启用gtid类型，否则就是普通的主从复制架构，开启这个模式时，且从库也必须设置log-bin
#gtid_mode=on
#强制GTID的一致性
#enforce-gtid-consistency=1
#主库设置，指同步日志的文件名,默认在data目录下，也可直接指定一个路径
#log-bin=/server/webtool/mysql-8.0.19/log/mysql-bin
#binlog日志格式，可选值“MIXED”、“ROW”、“STATEMENT”，在5.6版本之前默认为“STATEMENT”，5.6之后默认为“MIXED”；因为“STATEMENT”方式在处理一些“不确定”性的方法时会造成数据不一致问题，我们建议使用“MIXED”或者“ROW”
#binlog_format=ROW
#这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。默认sync_binlog=0。也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。具体值说明如下：sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
#sync_binlog=0
#同步日志使用的内存大小
#binlog_cache_size=1M
#从库设置，slave保存同步中继日志的位置
#relay_log=/server/webtool/mysql-8.0.19/log/mysql-relay
#从库设置，当slave宕机后，假如relay-log损坏了，导致一部分中继日志没有处理，则自动放弃所有未执行的relay-log，并且重新从master上获取日志，这样就保证了relay-log的完整性
#relay_log_recovery=1
#从库设置，是否自动清空不再需要中继日志时。默认为1
#relay_log_purge=1
#从库设置，设置为只读，防止从库数据修改后，主从数据不一致，但是有超级权限的账号还是有写的权限，所以要某个账号只读的话，可以去掉账号的超级权限
#read_only=1
#主库设置，不需要记录到同步日志的库
#binlog-ignore-db=information_schema
#binlog-ignore-db=mysql
#binlog-ignore-db=performance_schema
#binlog-ignore-db=sys
#主库设置，需要记录到同步日志的库
#binlog-do-db=
#从库设置，不需要同步的库
#replicate-ignore-db=information_schema
#replicate-ignore-db=mysql
#replicate-ignore-db=performance_schema
#replicate-ignore-db=sys
#从库设置，需要同步的库
#replicate-do-db=
#从库设置，不需要同步的库.表(%表示库内的全部表)
#replicate-wild-ignore-table = 数据库名字.表名字
#从库设置，需要同步的库.表(%表示库内的全部表)
#replicate-wild-do-table = 数据库名字.表名字
#同步时，把同步操作也记录到自己的同步日志文件中（当msyql同时是主库也是从库时，需要设置）
#log_slave_updates=1
#从库设置，从库复制时跳过指定错误防止中断复制（all表示跳过所有错误，或直接写错误码，多个逗号隔开）
#slave-skip-errors=1062,1053,1146
#设置为1时，slave复制不随mysql启动而启动，防止服务器意外重启，主从复制时容易造成1062的错误
#skip-slave-start=1
#主从复制时，网络中断，主从都没有察觉，从库等待该时间后（默认3600秒），才会认为网络故障，发起重连并同步这段时间的数据
#slave_net_timeout=60
#主从网络中断等待重连的时间，默认60秒
#master_connect_retry=
#检测到网络中断后，从数据库尝试重连主数据库的次数
#master_retry_count=

2、主库设置：
	//主数据库创建用户(授予从库复制权限，如之前创建了任意ip登录的拥有全部权限的账号也可使用)
	CREATE USER 'root'@'%' IDENTIFIED BY '123456';
	GRANT REPLICATION SLAVE ON *.* TO 'root'@'%' WITH GRANT OPTION;
	//查看主数据库状态，记录其中的File和Position的值(从库设置需要)
	SHOW MASTER STATUS;
3、从库设置：
	//从库设置主库信息（MASTER_HOST-主库ip，MASTER_USER-主库用户名，MASTER_PASSWORD-主库用户密码，MASTER_LOG_FILE-主库日志文件名，MASTER_LOG_POS-主库日志指针偏移值）
	CHANGE MASTER TO MASTER_HOST='192.168.1.160', MASTER_USER='root', MASTER_PASSWORD='123456', MASTER_LOG_FILE='mysql-bin.000015', MASTER_LOG_POS=565;
	//开启从库（开始同步）
	start slave;
	//查看从库状态（Slave_IO_Running和Slave_SQL_Running这两行必须显示yes才表示成功）
	show slave status \G;

4、从库复制时报错处理方法（在从库配置文件里设置slave-skip-errors=all，一劳永逸）
	//停止从库同步
	stop slave;
	//跳过一个事务
	SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1
	//开启从库同步
	start slave;

	//开启从库同步报错 Slave failed to initialize relay log info structure from the repository时重置同步服务器
	reset slave;
/**--------------------------------主从配置 结束--------------------------------**/