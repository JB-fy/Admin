Bois开启虚拟化
Windows禁用Hyper-V
    控制面板-程序-启用或关闭Windows功能-取消以下选项
        Hypef-V
        Windows虚拟机监控程序平台
        虚拟机平台
VMware设置
    虚拟机设置-处理器-虚拟化引擎-勾选以下选项
        虚拟化Intel VT-x等选项
设置Docker的软件包存储库
    dnf -y install dnf-plugins-core
    dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
安装Docker引擎（无法安装时，更换国内存储库：http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo）
    dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
设置开机自启动
    systemctl enable --now docker
修改配置(registry-mirrors设置国内镜像仓库；exec-opts配置与kubernetes使用相同cgroup驱动)
    vi /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m",
    "max-file": "5"
  },
  "registry-mirrors": [
    "https://docker.m.daocloud.io"
  ]
}
非root用户需添加到docker用户组
    usermod -aG docker $USER


/**----------------常用命令 开始----------------**/
# 登录指定镜像仓库地址
docker login --username=账号 --password=密码 仓库地址
# 详细信息
docker info
# 查看当前镜像
docker images
# 打包镜像
docker build -t 镜像名:版本 Dockerfile文件所在目录
# 保存镜像
docker save -o 文件名.tar 镜像名:版本
# 加载镜像
docker load -i 文件名.tar
# 打包镜像
docker build -t 镜像名:版本 Dockerfile文件所在目录
# 拉取
docker pull 镜像名:版本
# 修改版本
docker tag 镜像名:旧版本 镜像名:新版本
# 删除
docker rmi 镜像名:版本
# 创建（-p 主机:容器。--network host使用当前主机网络；-v /etc/localtime:/etc/localtime:ro使用当前主机时间时区）
docker run -d --restart unless-stopped --name 名称 --network container:其它容器名称 --ipc=container:其它容器名称 --pid=container:其它容器名称 -h 容器域名 -p 端口:端口 -v 目录:目录 -e 环境变量 -w 工作目录 镜像名:版本
# 启动
docker start 名称或容器ID
# 停止
docker stop 名称或容器ID
# 删除
docker rm 名称或容器ID
# 删除悬空镜像（docker images命令显示<none>的悬空镜像）
docker image prune
# 进入容器执行命令（如用/bin/bash启动交互式shell）
docker exec -it 名称或容器ID 命令
# 查看
docker ps -a
# 资源监控
docker stats 名称或容器ID                
# 日志
docker logs --tail 1000 -f 名称或容器ID
# 创建网络（多容器共用网络可直接指定--network 名称）
docker network create 名称 --driver bridge
/**----------------常用命令 结束----------------**/



/**----------------常用软件 开始----------------**/
# golang
docker run -v /home/jb/dev/app:/app -w 工作目录 --rm -it golang:1.22.12 bash
    # 示例：docker run --network host -v /home/jb/dev/app:/app -w /app/pg/tbGo/cmd/tbinner_server -it golang:1.22.12 go run main.go

# nginx
docker run -d -p 80:80 -v 配置:/etc/nginx/nginx.conf -v 静态文件:/usr/share/nginx/html -v 日志:/var/log/nginx nginx:latest
    # 示例：docker run -d --name nginx-alone --network host -v /home/jb/dev/tool/nginx/1.27.5/config/nginx.conf:/etc/nginx/nginx.conf -v /home/jb/dev/tool/nginx/1.27.5/config/web:/etc/nginx/web -v /home/jb/dev/app:/home/jb/dev/app nginx:1.27.5

# redis
docker run -d -p 6379:6379 -v 配置:/usr/local/etc/redis/redis.conf -v 数据:/data redis:latest redis-server /usr/local/etc/redis/redis.conf --requirepass 密码
# 示例：docker run -d --name redis-alone --network host -v /home/jb/dev/tool/redis/8.0.1/data:/data redis:8.0.1
# 集群示例：
    # 使用以下命令启动多个节点
        docker run -d --name redis-node --network host -v /home/jb/dev/tool/redis/8.0.1/data:/data redis:8.0.1 redis-server --port 6379 --cluster-enabled yes --cluster-config-file /data/nodes.conf --cluster-node-timeout 5000 --appendonly yes --requirepass 密码 --masterauth 密码
    # 任意容器执行以下命令
        docker exec -it redis-node redis-cli --cluster create -a 密码 节点IP:6379 节点IP:6379 节点IP:6379 --cluster-replicas 0

# mysql
docker run -d -p 3306:3306 -v 配置:/etc/mysql/my.cnf -v 数据:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=密码 -e MYSQL_DATABASE=库名 -e MYSQL_USER=用户 -e MYSQL_PASSWORD=密码 mysql:latest --defaults-file=/etc/mysql/my.cnf
    # 示例：docker run -d --name mysql-alone --network host -v /home/jb/dev/tool/mysql/9.3.0/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:9.3.0
    # 集群示例（使用bitnami/mysql镜像比较简单方便，不用手动写配置文件）：
        docker run -d --name mysql-node --network host -v 配置和数据:/bitnami/mysql -e MYSQL_PORT_NUMBER=3306 -e MYSQL_ROOT_USER=用户 -e MYSQL_ROOT_PASSWORD=密码 -e MYSQL_DATABASE=库名 -e MYSQL_USER=用户 -e MYSQL_PASSWORD=密码 -e MYSQL_REPLICATION_MODE=master或slave -e MYSQL_REPLICATION_USER=复制用户 -e MYSQL_REPLICATION_PASSWORD=复制密码 -e MYSQL_MASTER_HOST=主库IP（从库设置） -e MYSQL_MASTER_PORT_NUMBER=主库端口（从库设置） -e MYSQL_MASTER_ROOT_USER=主库账号（从库设置） -e MYSQL_MASTER_ROOT_PASSWORD=主库密码（从库设置） bitnami/mysql:9.3.0
        # 宿主机需先创建目录，并赋予写入权限
            mkdir -p /home/jb/dev/tool/mysql/9.3.0 && chmod -R 777 /home/jb/dev/tool/mysql/9.3.0
        # 主库执行
            docker run -d --name mysql-node --network host -v /home/jb/dev/tool/mysql/9.3.0:/bitnami/mysql -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_REPLICATION_MODE=master -e MYSQL_REPLICATION_USER=repl_user -e MYSQL_REPLICATION_PASSWORD=123456 bitnami/mysql:9.3.0
        # 从库执行
            docker run -d --name mysql-node --network host -v /home/jb/dev/tool/mysql/9.3.0:/bitnami/mysql -e MYSQL_REPLICATION_MODE=slave -e MYSQL_REPLICATION_USER=repl_user -e MYSQL_REPLICATION_PASSWORD=123456 -e MYSQL_MASTER_HOST=192.168.0.200 -e MYSQL_MASTER_ROOT_PASSWORD=123456 bitnami/mysql:9.3.0

# postgresql
docker run -d -p 5432:5432 -v 配置:/etc/postgresql -v 数据:/var/lib/postgresql/data -e POSTGRES_USER=用户 -e POSTGRES_PASSWORD=密码 -e POSTGRES_DB=库名 postgres:latest -c config_file=/etc/postgresql
    # 示例：docker run -d --name postgresql-alone --network host -v /home/jb/dev/tool/postgresql/17.4/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=123456 postgres:17.4
    # 集群示例（使用bitnami/postgresql镜像比较简单方便，不用手动写配置文件）：
        docker run -d --name postgresql-node --network host -v 配置和数据:/bitnami/postgresql -e POSTGRESQL_PORT_NUMBER=5432 -e POSTGRESQL_USERNAME=用户 -e POSTGRESQL_PASSWORD=密码 -e POSTGRESQL_DATABASE=库名 -e POSTGRESQL_REPLICATION_MODE=master或slave -e POSTGRESQL_REPLICATION_USER=复制用户 -e POSTGRESQL_REPLICATION_PASSWORD=复制密码 -e POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=0（同步复制副本数量，需从库确认主库才提交事务） -e POSTGRESQL_SYNCHRONOUS_COMMIT_MODE=on或remote_write或remote_apply（越后面越安全） -e POSTGRESQL_MASTER_HOST=主库IP（从库设置） -e POSTGRESQL_MASTER_PORT=主库端口（从库设置） bitnami/postgresql:17.5.0
        # 宿主机需先创建目录，并赋予写入权限
            mkdir -p /home/jb/dev/tool/postgresql/17.5.0 && chmod -R 777 /home/jb/dev/tool/postgresql/17.5.0
        # 主库执行
            docker run -d --name postgresql-node --network host -v /home/jb/dev/tool/postgresql/17.5.0:/bitnami/postgresql -e POSTGRESQL_PASSWORD=123456 -e POSTGRESQL_REPLICATION_MODE=master -e POSTGRESQL_REPLICATION_USER=repl_user -e POSTGRESQL_REPLICATION_PASSWORD=123456 bitnami/postgresql:17.5.0
        # 从库执行
            docker run -d --name postgresql-node --network host -v /home/jb/dev/tool/postgresql/17.5.0:/bitnami/postgresql -e POSTGRESQL_PASSWORD=123456 -e POSTGRESQL_REPLICATION_MODE=slave -e POSTGRESQL_REPLICATION_USER=repl_user -e POSTGRESQL_REPLICATION_PASSWORD=123456 -e POSTGRESQL_MASTER_HOST=192.168.0.200 bitnami/postgresql:17.5.0

# mongodb
docker run -d -p 27017:27017 -v 配置:/etc/mongod.conf -v 数据:/data/db -e MONGO_INITDB_ROOT_USERNAME=用户 -e MONGO_INITDB_ROOT_PASSWORD=密码 mongo:latest --config /etc/mongod.conf
    # 示例：docker run -d --name mongo-alone --network host -v /home/jb/dev/tool/mongodb/8.0.8/data:/data/db mongo:8.0.8

# scylladb（ALLOW_EMPTY_PASSWORD=yes设为无需账号密码登录）
docker run -d --ulimit memlock=-1 --ulimit nofile=100000:100000 -p 9042:9042 -v 配置:/conf -v 数据:/bitnami/scylladb/data -e SCYLLADB_CQL_PORT_NUMBER=9042 -e SCYLLADB_CLUSTER_NAME=集群名称 -e SCYLLADB_ENDPOINT_SNITCH=GossipingPropertyFileSnitch -e SCYLLADB_SEEDS=种子节点IP,种子节点IP（集群第一个节点初始化时不允许设置多个，否则会因竞争导致初始化卡住而失败） -e SCYLLADB_HOST=当前节点内网IP -e SCYLLADB_BROADCAST_ADDRESS=当前节点外网IP（需外网访问设置） bitnami/scylladb:latest
    # 示例：docker run -d --name scylladb-alone --network host -v /home/jb/dev/tool/scylladb/6.2.3/data:/bitnami/scylladb/data -e SCYLLADB_HOST=192.168.0.200 -e ALLOW_EMPTY_PASSWORD=yes bitnami/scylladb:6.2.3
    # 注意事项
        # 宿主机需先创建数据目录，并赋予写入权限
            mkdir -p /home/jb/dev/tool/scylladb/6.2.3/data && chmod -R 777 /home/jb/dev/tool/scylladb/6.2.3/data
        # SCYLLADB_DATACENTER=数据中心标识 和 SCYLLADB_RACK=物理机标识 实测无效，只能通过挂载配置文件cassandra-rackdc.properties到/conf目录实现
            mkdir -p /home/jb/dev/tool/scylladb/6.2.3/conf
            vi /home/jb/dev/tool/scylladb/6.2.3/conf/cassandra-rackdc.properties
dc=数据中心标识
rack=物理机标识

# cassandra
docker run -d -p 9042:9042 -v 配置:/etc/cassandra/cassandra.yaml -v 数据:/var/lib/cassandra cassandra:latest
    # 示例：docker run -d --name cassandra-alone --network host -v /home/jb/dev/tool/cassandra/5.0.4/data:/var/lib/cassandra cassandra:5.0.4

# kafka（可用uuidgen生成集群UUID。不设置密码时，将SASL_PLAINTEXT改成PLAINTEXT。当只作为broker节点时，只需修改以下设置：-e KAFKA_CFG_PROCESS_ROLES=broker -e KAFKA_CFG_LISTENERS=SASL_PLAINTEXT://:9092）
docker run -d -p 9092:9092 -p 9093:9093 -v 配置:/opt/bitnami/kafka/config/server.properties -v 数据:/bitnami/kafka -e KAFKA_CLUSTER_ID=集群UUID -e KAFKA_CFG_NODE_ID=节点标识 -e KAFKA_CFG_PROCESS_ROLES=controller,broker -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=节点标识@节点IP:9093,节点标识@节点IP:9093（集群所有节点设置都必须一样，控制器节点需依次顺序启动） -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:SASL_PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER -e KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SASL_PLAINTEXT -e KAFKA_CLIENT_LISTENER_NAME=SASL_PLAINTEXT -e KAFKA_CFG_LISTENERS=CONTROLLER://:9093,SASL_PLAINTEXT://:9092 -e KAFKA_CFG_ADVERTISED_LISTENERS=SASL_PLAINTEXT://节点IP:9092 -e KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL=PLAIN -e KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN -e KAFKA_INTER_BROKER_USER=账号 -e KAFKA_INTER_BROKER_PASSWORD=密码 -e KAFKA_CONTROLLER_USER=账号 -e KAFKA_CONTROLLER_PASSWORD=密码 -e KAFKA_CLIENT_USERS=账号 -e KAFKA_CLIENT_PASSWORDS=密码 bitnami/kafka:latest
    # 示例：docker run -d --name kafka-alone --network host -v /home/jb/dev/tool/kafka/4.0.0:/bitnami/kafka -e KAFKA_CFG_NODE_ID=1 -e KAFKA_CFG_PROCESS_ROLES=controller,broker -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@192.168.0.200:9093 -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER -e KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT -e KAFKA_CLIENT_LISTENER_NAME=PLAINTEXT -e KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092 -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://192.168.0.200:9092 -e KAFKA_CFG_SASL_MECHANISM_CONTROLLER_PROTOCOL=PLAIN -e KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN bitnami/kafka:4.0.0
    # 注意事项
        # 宿主机需先创建数据目录，并赋予写入权限
            mkdir -p /home/jb/dev/tool/kafka/4.0.0 && chmod -R 777 /home/jb/dev/tool/kafka/4.0.0
        # 云服务器设置--network host，且主机名不是IP时，会无法识别主机名，需修改/etc/hosts文件追加
            当前服务器IP 服务器主机名(hostname查看)

# gitlab
    # gitlab-ce（不建议用--network host。gitlab只带软件所用端口可能与当前服务器已安装软件冲突）
        docker run -d --name gitlab-ce -p 22:22 -p 80:80 -p 443:443 -v /home/jb/dev/tool/gitlab/ce/17.11.3-ce.0/config:/etc/gitlab -v /home/jb/dev/tool/gitlab/ce/17.11.3-ce.0/logs:/var/log/gitlab -v /home/jb/dev/tool/gitlab/ce/17.11.3-ce.0/data:/var/opt/gitlab -e GITLAB_OMNIBUS_CONFIG="external_url '域名'; gitlab_rails['gitlab_shell_ssh_port'] = 22; postgresql['port'] = 5432; redis['port'] = 6379; nginx['listen_port'] = 80（默认external_url的端口）; nginx['ssl_listen_port'] = 443（默认external_url的端口）;" gitlab/gitlab-ce:17.11.3-ce.0
        # root密码查看（只保留24小时）
            docker exec -it gitlab-ce cat /etc/gitlab/initial_root_password
    # gitlab-runner
        docker run -d --name gitlab-runner --network host -v /home/jb/dev/tool/gitlab/runner/v18.0.2/config:/etc/gitlab-runner -v /var/run/docker.sock:/var/run/docker.sock gitlab/gitlab-runner:v18.0.2
        # 进入gitlab-runner注册Runner（--docker-privileged true非常重要，dind必须，否则无法使用CI/CD）
            docker exec -it gitlab-runner gitlab-runner register --non-interactive --url "域名" --registration-token "注册令牌(后台获取)" --executor "docker" --docker-image alpine:latest --docker-privileged true --description "docker-runner"
/**----------------常用软件 结束----------------**/



/**----------------docker compose常用命令 开始----------------**/
# 验证配置
docker compose -f 文件名（默认compose）.yaml config
# 启动
docker compose -f 文件名.yaml -p 项目名（默认配置文件所在目录名） up -d
# 重启
docker compose -f 文件名.yaml restart 名称
# 停止
docker compose -f 文件名.yaml down
# 查看
docker compose -f 文件名.yaml ps
# 日志
docker compose -f 文件名.yaml logs -f
/**----------------docker compose常用命令 结束----------------**/



/**----------------compose.yaml示例 开始----------------**/
services:
  admin:
    image: admin:0.0.1
    container_name: admin
    restart: unless-stopped
    network_mode: host
    env_file: /home/jb/dev/app/admin/.env # 服务器执行命令创建.env文件：echo -e "SERVER_LOCAL_IP=$(hostname -I | awk '{printf "%s", $1}')\nSERVER_NETWORK_IP=$(curl -s --max-time 3 ifconfig.me || curl -s --max-time 3 https://ipinfo.io/ip || curl -s --max-time 3 https://checkip.amazonaws.com || curl -s --max-time 3 https://icanhazip.com || curl -s --max-time 3 https://api.ipify.org)" > /home/jb/dev/app/admin/.env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home/jb/dev/app/admin/public:/home/jb/dev/app/admin/public
      - /home/jb/dev/app/admin/api/manifest:/home/jb/dev/app/admin/api/manifest
    # depends_on:
    #   - redis-alone
    #   - mysql-node
    #   - postgresql-node

  nginx-alone:
    image: nginx:1.27.5
    container_name: nginx-alone
    restart: unless-stopped
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home/jb/dev/tool/nginx/1.27.5/config/nginx.conf:/etc/nginx/nginx.conf
      - /home/jb/dev/tool/nginx/1.27.5/config/web:/etc/nginx/web
      - /home/jb/dev/app:/home/jb/dev/app

  redis-alone:
    image: redis:8.0.1
    container_name: redis-alone
    restart: unless-stopped
    network_mode: host
    command: ["redis-server", "--requirepass", "密码"]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home/jb/dev/tool/redis/8.0.1/data:/data

#   mysql-alone:
#     image: mysql:9.3.0
#     container_name: mysql-alone
#     restart: unless-stopped
#     network_mode: host
#     volumes:
#       - /etc/localtime:/etc/localtime:ro
#       - /home/jb/dev/tool/mysql/9.3.0/data:/var/lib/mysql
#     environment:
#       MYSQL_ROOT_PASSWORD: 密码
#       MYSQL_DATABASE: 库名
#       MYSQL_USER: 账号
#       MYSQL_PASSWORD: 密码

  mysql-node:
    image: bitnami/mysql:9.3.0
    container_name: mysql-node
    restart: unless-stopped
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home/jb/dev/tool/mysql/9.3.0:/bitnami/mysql # mkdir -p /home/jb/dev/tool/mysql/9.3.0 && chmod -R 777 /home/jb/dev/tool/mysql/9.3.0
    environment:
      MYSQL_PORT_NUMBER: 3306
      MYSQL_ROOT_USER: 账号
      MYSQL_ROOT_PASSWORD: 密码
      MYSQL_DATABASE: 库名
      MYSQL_USER: 账号
      MYSQL_PASSWORD: 密码
      MYSQL_REPLICATION_MODE: master或slave
      MYSQL_REPLICATION_USER: 复制用户
      MYSQL_REPLICATION_PASSWORD: 复制密码
      MYSQL_MASTER_HOST: 主库IP（从库设置）
      MYSQL_MASTER_PORT_NUMBER: 主库端口（从库设置）
      MYSQL_MASTER_ROOT_USER: 主库账号（从库设置）
      MYSQL_MASTER_ROOT_PASSWORD: 主库密码（从库设置）

#   postgresql-alone:
#     image: postgres:17.4
#     container_name: postgresql-alone
#     restart: unless-stopped
#     network_mode: host
#     volumes:
#       - /etc/localtime:/etc/localtime:ro
#       - /home/jb/dev/tool/postgresql/17.4/data:/var/lib/postgresql/data
#     environment:
#       POSTGRES_USER: 账号
#       POSTGRES_PASSWORD: 密码
#       MYSQL_DATABASE: 库名

  postgresql-node:
    image: bitnami/postgresql:17.5.0
    container_name: postgresql-node
    restart: unless-stopped
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home/jb/dev/tool/postgresql/17.5.0:/bitnami/postgresql # mkdir -p /home/jb/dev/tool/postgresql/17.5.0 && chmod -R 777 /home/jb/dev/tool/postgresql/17.5.0
    environment:
      POSTGRESQL_PORT_NUMBER: 5432
      POSTGRESQL_USERNAME: 账号
      POSTGRESQL_PASSWORD: 密码
      POSTGRESQL_DATABASE: 库名
      POSTGRESQL_REPLICATION_MODE: master或slave
      POSTGRESQL_REPLICATION_USER: 复制用户
      POSTGRESQL_REPLICATION_PASSWORD: 复制密码
      POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS: 0（同步复制副本数量，需从库确认主库才提交事务）
      POSTGRESQL_SYNCHRONOUS_COMMIT_MODE: on或remote_write或remote_apply（越后面越安全） 
      POSTGRESQL_MASTER_HOST: 主库IP（从库设置）
      POSTGRESQL_MASTER_PORT: 主库端口（从库设置）
/**----------------compose.yaml示例 结束----------------**/