依赖：yum install gcc gcc-c++ make pcre-devel openssl-devel
    1、创建安装目录
        mkdir -p /server/tool/nginx-1.24.0
    2、解压nginx安装
        tar -xvf nginx-1.24.0.tar.gz

        进入解压目录编译并安装
        ./configure --prefix=/server/tool/nginx-1.24.0 --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-http_realip_module --with-stream --with-stream_ssl_module --with-stream_realip_module --with-http_flv_module --with-http_stub_status_module --with-pcre --with-pcre-jit

        make && make install
        //运行测试（远程不能连接时需关闭防火墙）
        /server/tool/nginx-1.24.0/sbin/nginx
    3、域名配置
        编辑文件 vi /server/tool/nginx-1.24.0/conf/nginx.conf 写入
# user nobody;    #启动Ngnix工作进程的用户和组
worker_processes auto;  #启动的工作进程数，默认1，可设置自动auto
worker_rlimit_nofile 65536;   #工作进程最大打开文件数
# error_log /var/log/nginx/error.log warn;    #错误日志配置，可选值：debug、info、notice、wam、error、crit、alert、emerg
# pid /var/run/nginx.pid; #pid文件保存路径
events {
    worker_connections 10240;   #设置单个nginx工作进程可以接爱的最大并发连接数据。在nginx作为http服务器的时候，最大连接数为worker_processes * worker_connctions；在nginx作为反向代理服务器的时候，最大连接数为worker_processes * worker_connections / 2 
    use epoll;  #使用epoll事件驱动，Nginx支持众多的事件驱动，可选值：select、poll、epoll
    multi_accept on;    #Nginx服务器的每个工作进程可以同时接受多个新的网络连接，但是需要在配置文件中配置，此指令默认为关闭，即默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个
    accept_mutex on;    #优化同一时刻只有一个请求而避免多个睡眠进程被唤醒的设置，on为防止被同时唤醒，默认为off，全部唤醒的过程也成为"惊群"，因此nginx刚安装完以后要进行适当的优化
}
http {
    # access_log /var/log/nginx/access.log main;
    server_tokens off;  #隐藏Nginx版本信息
    include mime.types; #导入支持的文件类型
    default_type application/octet-stream;  #未识别的mime类型访问，会作为二进制流返回
    client_max_body_size 512m; #最大请求体大小（配合后端）
    # client_body_buffer_size 16k; #客户端请求体缓冲区大小
    # client_header_buffer_size 2k; #客户端请求头缓冲区大小
    # large_client_header_buffers 4 8k; #大请求头缓冲区大小

    sendfile on;    #指定是否使用sendfile系统调用来传输文件
    tcp_nopush on;  #在开启了sendfile的情况下，合并请求后统一发送给客户端
    tcp_nodelay on; #开启了keepalived模式下的连接受此影响，当为off时，延迟0.2s发送，默认为on，不延迟发送，立即发送用户相应报文

    open_file_cache max=4000 inactive=60s;  #开启文件描述符缓存
    open_file_cache_valid 120s; #缓存有效性检查间隔
    open_file_cache_min_uses 3; #文件被访问至少N次才会缓存
    open_file_cache_errors on;  #是否缓存文件错误信息

    keepalive_timeout 30s; #设置会话保持时间。默认75秒
    keepalive_requests 500;    #单个keepalive连接的最大请求数。默认100

    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;

    gzip on;    #开启gzip压缩
    gzip_proxied any;   #对代理响应启用压缩
    gzip_vary on;   #支持缓存不同版本内容
    gzip_comp_level 6;  #压缩等级（1~9，数字越大压缩越高但更耗CPU）
    gzip_types text/plain text/css text/javascript text/xml application/json application/javascript application/xml application/xhtml+xml image/svg+xml;

    include web/*.conf;   #导入其他路径的配置文件
}

        创建目录 mkdir -p /server/tool/nginx-1.24.0/conf/web
        在该目录下创建各个域名的配置文件
        编辑文件 vi /server/tool/nginx-1.24.0/conf/web/域名.conf 写入

    4、编辑自启动文件
        vi /etc/systemd/system/nginx-1.24.0.service
[Unit]
Description=nginx
After=network.target
[Service]
Type=forking
PIDFile=/server/tool/nginx-1.24.0/logs/nginx.pid
ExecStart=/server/tool/nginx-1.24.0/sbin/nginx
ExecReload=/server/tool/nginx-1.24.0/sbin/nginx -s reload
ExecStop=/server/tool/nginx-1.24.0/sbin/nginx -s quit
PrivateTmp=true
[Install]
WantedBy=multi-user.target
    5、设置自启动
        systemctl enable nginx-1.24.0
    6、设置环境变量增加以下目录（参考linux常用命令）
        /server/tool/nginx-1.24.0/sbin