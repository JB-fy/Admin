安装依赖
    yum -y install gcc gcc-c++ cmake autoconf automake make unzip bison libidn nss_ldap openldap-clients libtool* tcl-devel libjpeg-devel libpng-devel freetype-devel libxml2-devel pcre-devel zlib-devel glibc-devel glib2-devel bzip2-devel ncurses-devel curl-devel e2fsprogs-devel krb5-devel openssl-devel openldap-devel mysql-devel gd-devel libicu-devel libcurl-devel gmp-devel readline-devel libxslt-devel libtirpc-devel sqlite-devel libarchive
	yum -y install https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/o/oniguruma-6.8.2-1.el7.x86_64.rpm
	yum -y install https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/o/oniguruma-devel-6.8.2-1.el7.x86_64.rpm

mkdir -p /server/web

一、nginx安装部分
	1、创建安装目录
		mkdir -p /server/tool/nginx-1.22.0
	2、解压nginx安装
		tar zxvf nginx-1.22.0.tar.gz
		进入解压目录运行
		/*
		--user=nginx --group=nginx 带上这两个参数时必须创建用户组和用户并授权目录
		创建用户组：groupadd nginx
		创建用户：useradd -r -g nginx -s /bin/false nginx
		改变文件所属用户组和用户：chown -R nginx:nginx /server/tool/nginx-1.22.0
		*/
        ./configure --prefix=/server/tool/nginx-1.22.0 --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-http_realip_module --with-stream --with-stream_ssl_module --with-stream_realip_module --with-http_flv_module --with-http_stub_status_module --with-pcre --with-pcre-jit

		make && make install //安装
		//运行测试（远程不能连接时需关闭防火墙）
		/server/tool/nginx-1.22.0/sbin/nginx
	3、域名配置
		编辑文件 vi /server/tool/nginx-1.22.0/conf/nginx.conf 写入
#user nginx nginx;	#启动Ngnix工作进程的用户和组
worker_processes auto;	#启动的工作进程数，默认1，可设置自动auto

#error_log	logs/error.log error;	#错误日志配置，可选值：debug、info、notice、wam、error、crit、alert、emerg
#pid		logs/nginx.pid;	#pid文件保存路径
#work_priority 0;			#工作进程的优先级 -20~19
#work_rlimit_nofile 65536;	#工作进程最大打开文件数
#daemon on;				#前台运行nginx用于测试，docker等环境，默认为on
#master_process off;		#是否开启master-woker工作模式，关闭则不会产生worker子进程处理请求，而是以master主进程自身处理请求

events {
    worker_connections 1024;	#设置单个nginx工作进程可以接爱的最大并发连接数据。在nginx作为http服务器的时候，最大连接数为worker_processes * worker_connctions；在nginx作为反向代理服务器的时候，最大连接数为worker_processes * worker_connections / 2 
    #use epoll;			#使用epoll事件驱动，Nginx支持众多的事件驱动，可选值：select、poll、epoll
    #accept_mutex on;		#优化同一时刻只有一个请求而避免多个睡眠进程被唤醒的设置，on为防止被同时唤醒，默认为off，全部唤醒的过程也成为"惊群"，因此nginx刚安装完以后要进行适当的优化
    #multi_accept on;		#Nginx服务器的每个工作进程可以同时接受多个新的网络连接，但是需要在配置文件中配置，此指令默认为关闭，即默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个  
}

http {
	include mime.types;	#导入支持的文件类型
	default_type application/octet-stream;	#设置默认的类型，会提示下载不匹配的类型文件

	#日志配置部分
	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	#                  '$status $body_bytes_sent "$http_referer" '
	#                  '"$http_user_agent" "$http_x_forwarded_for"';
	#access_log  logs/access.log  main;

	sendfile		on;	#指定是否使用sendfile系统调用来传输文件
	#tcp_nopush		on;	#在开启了sendfile的情况下，合并请求后统一发送给客户端
	#tcp_nodelay 	off;	#开启了keepalived模式下的连接受此影响，当为off时，延迟0.2s发送，默认为on，不延迟发送，立即发送用户相应报文
	keepalive_timeout	65;	#设置会话保持时间，单位是秒
	gzip	on;			#开启文件压缩
	client_max_body_size 1024m;	#最大上传文件大小，php也得设置，以双方最小值为准
	
	include	/server/tool/nginx-1.22.0/conf/web/*.conf;	#导入其他路径的配置文件
}
		
	*/创建目录 mkdir -p /server/tool/nginx-1.22.0/conf/web
		编辑文件 vi /server/tool/nginx-1.22.0/conf/web/域名替换.conf 写入
upstream zf_http {
	server 127.0.0.1:9501;
	#server 127.0.0.1:9502;
}
map $http_upgrade $zf_connection_upgrade {
	default upgrade;
	''      close;
}
map $http_x_forwarded_proto $zf_scheme {
     default $scheme;
     https   https;
}

#server {
#	listen 80;
#	server_name 域名替换;
#	rewrite ^(.*) https://$server_name$1 permanent;
#}

server {
	listen 80;
	listen 443 ssl http2;
	server_name 域名替换;

	ssl_certificate				/server/web/zf/api/ssl/ssl.crt;
	ssl_certificate_key			/server/web/zf/api/ssl/ssl.key;
	ssl_session_cache			shared:SSL:1m;
	ssl_session_timeout			5m;
	#ssl_protocols				TLSv1 TLSv1.1 TLSv1.2;
	#ssl_ciphers				ALL:!DH:!EXPORT:!RC4:+HIGH:+MEDIUM:!eNULL;
	ssl_ciphers					HIGH:!aNULL:!MD5;
	ssl_prefer_server_ciphers	on;

	location /favicon.ico {
		root /server/web/zf;
	}
	#后台入口
	location ~ ^/view/ {
		root /server/web/zf;
		index index.html;
	}
	#通用匹配
	location / {
		#执行代理访问真实服务器
		proxy_pass	http://zf_http;
		proxy_redirect	off;

		#请求是http还是https转发到后端服务器，以便后端服务器判断
		proxy_set_header X-Forwarded-Proto $zf_scheme;
		#将客户端的 Host 和 IP 信息一并转发到对应节点
		# proxy_set_header Host $host;
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		#转发Cookie，设置 SameSite
		#proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";

		#要支持websocket需要设置以下3项
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $zf_connection_upgrade;
		#proxy_set_header Connection "upgrade";
		#客户端与服务端无交互 60s 后自动断开连接，请根据实际业务场景设置
		#proxy_connect_timeout 4s;
		#proxy_read_timeout 60s;
		#proxy_send_timeout 12s;
    }
}
    4、设置nginx开机启动（设置完不能自启动说明没有设置执行权限）
    	编辑文件vi /etc/rc.d/init.d/nginx-1.22.0 写入
#!/bin/sh
# chkconfig: 2345 20 80
# description: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server
nginx="/server/tool/nginx-1.22.0/sbin/nginx"
prog=$(basename $nginx)
NGINX_CONF_FILE="/server/tool/nginx-1.22.0/conf/nginx.conf"
lockfile=/var/lock/subsys/nginx
start() {
    echo   $"Starting $prog: "
    #daemon $nginx -c $NGINX_CONF_FILE
     ${nginx}  -c $NGINX_CONF_FILE
    echo  $"Start $prog  : ok"
}
stop() {
    echo  $"Stopping $prog: "
    killall -9 nginx
    echo  $"Stop $prog  :ok "
}
restart() {
    stop
    sleep 5
    start
}
reload() {
    echo  $"Reloading $prog: "
     ${nginx} -c $NGINX_CONF_FILE  -s reload
    echo  $"Reloading $prog: ok"
}
force_reload() {
    restart
}
configtest() {
     ${nginx} -t -c $NGINX_CONF_FILE
}
rh_status() {
    ps -ef | grep nginx
}
rh_status_q() {
    rh_status >/dev/null 2>&1
}
case "$1" in
    start)
        start ;;
    stop)
       stop;;
    restart)
        $1 ;;
    reload)
        $1   ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
            ;;
    *)
      echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
        exit 2
esac

		//再执行一下命令设置自启动
    	chmod 755 /etc/rc.d/init.d/nginx-1.22.0
    	chkconfig --add nginx-1.22.0
		chkconfig nginx-1.22.0 on
	5、设置环境变量是为了方便输入命令（参考linux学习文件）
		vi /etc/profile在最下面增加PATH=$PATH:/server/tool/nginx-1.22.0/sbin:/server/tool/php-7.4.30/bin
		source /etc/profile
二、php安装
	1、创建安装目录
		mkdir -p /server/tool/php-7.4.30
	2、解压php安装
		tar zxvf php-7.4.30.tar.gz
		进入解压目录运行
		/*
		报错：configure: error: Cannot find ldap libraries in /usr/lib.
		cp -frp /usr/lib64/libldap* /usr/lib/
		*/

		创建用户组：groupadd php
		创建用户：useradd -r -g php -s /bin/false php
		改变文件所属用户组和用户：chown -R php:php /server/tool/php-7.4.30

		./configure --prefix=/server/tool/php-7.4.30 --with-config-file-path=/server/tool/php-7.4.30/etc --with-config-file-scan-dir=/server/tool/php-7.4.30/etc/php.d --enable-fpm --with-fpm-user=php --with-fpm-group=php --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-mysqlnd-compression-support --with-zlib --enable-xml --disable-rpath --enable-bcmath --enable-shmop --with-curl --enable-mbregex --enable-mbstring --enable-intl --enable-ftp --with-openssl --with-mhash --enable-pcntl --enable-sockets --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-pear --with-ldap=shared --without-gdbm --enable-exif --with-xsl --with-iconv-dir --enable-inline-optimization --with-xmlrpc --enable-maintainer-zts

		make && make install//安装
	3、拷贝配置文件
		cp /server/php-7.4.30/php.ini-production /server/tool/php-7.4.30/etc/php.ini
	4、设置环境变量是为了方便输入命令（参考linux学习文件）
		vi /etc/profile在最下面增加PATH=$PATH:/server/tool/php-7.4.30/bin
		source /etc/profile
	5、扩展安装
		phpize
		./configure
		make && make install
		在php.ini添加以下内容
		extension=xxxx.so
三、安装redis扩展
		tar zxvf phpredis-5.3.4.tgz
		进入目录编译
		phpize
		./configure --with-php-config=/server/tool/php-7.4.30/bin/php-config
		make && make install
		在php.ini添加以下内容
		vi /server/tool/php-7.4.30/etc/php.ini
		extension=redis.so
四、安装swoole
		tar zxvf swoole-src-4.7.1.tar.gz
		进入目录编译
		phpize
		./configure --enable-openssl --enable-http2
		make && make install
		在php.ini添加以下内容
		vi /server/tool/php-7.4.30/etc/php.ini
		extension=swoole.so
		安装完成后如果swoole启动报错执行以下步骤：
		vi ~/.bash_profile
		在最后一行添加 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
		source ~/.bash_profile


修改php配置参数
	编辑文件 vi /server/tool/php-7.4.30/etc/php.ini
修改以下参数
memory_limit            1024M
upload_max_filesize     50M
post_max_size           100M
max_execution_time      不改
追加
extension=redis.so
extension=swoole.so
swoole.use_shortname=off


rm -rf /server/php-7.4.30 /server/php-7.4.30.tar.gz /server/redis-5.3.4 /server/phpredis-5.3.4.tgz /server/swoole-src-4.7.1 /server/swoole-src-4.7.1.tar.gz /server/redis-6.2.6 /server/redis-6.2.6.tar.gz /server/mysql-8.0.26 /server/mysql-boost-8.0.26.tar.gz /server/nginx-1.22.0 /server/nginx-1.22.0.tar.gz

php /server/web/zf/api/bin/hyperf.php start &

########################################################################################
独立服务器需要安装redis和mysql
一、mysql安装部分
	1：创建mysql的安装目录及配置文件目录,数据库存放目录,日志目录
		mkdir -p /server/tool/mysql-8.0.26/data /server/tool/mysql-8.0.26/conf /server/tool/mysql-8.0.26/log
	2：解压mysql压缩包并进入解压的文件夹内编译安装
		tar zxvf mysql-boost-8.0.26.tar.gz
		/*报错处理：
		错误：Could not find rpcgen时处理如下
		wget https://github.com/thkukuk/rpcsvc-proto/releases/download/v1.4/rpcsvc-proto-1.4.tar.gz
		tar xf rpcsvc-proto-1.4.tar.gz
		cd rpcsvc-proto-1.4
		./configure
		make && make install
		错误：Please do not build in-source.  Out-of source builds are highly
		8版本以上cmake时会报这个错误，追加-DFORCE_INSOURCE_BUILD=1强制源内构建
		*/
		//5.7版本以上必须添加-DDOWNLOAD_BOOST=1 -DWITH_BOOST=/web/mysql/boost这句话！DWITH_BOOST为依赖库boost安装目录。可自己设置
		cmake -DCMAKE_INSTALL_PREFIX=/server/tool/mysql-8.0.26 -DMYSQL_DATADIR=/server/tool/mysql-8.0.26/data -DSYSCONFDIR=/server/tool/mysql-8.0.26/conf -DMYSQL_UNIX_ADDR=/server/tool/mysql-8.0.26/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_SSL=yes -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/server/mysql-8.0.26/boost -DFORCE_INSOURCE_BUILD=1 -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
	3、运行安装命令
		make && make install
	4、在/server/tool/mysql-8.0.26/conf/目录下建立my.cnf配置文件：
		vi /server/tool/mysql-8.0.26/conf/my.cnf
		内容如下
[mysqld]
#mysql以什么用户运行
user=mysql
#mysql运行在哪个端口
port=3306
#mysql的数据目录
datadir=/server/tool/mysql-8.0.26/data
#mysql以socket方式运行的sock文件位置
socket=/server/tool/mysql-8.0.26/mysql.sock
#错误日志位置
log-error=/server/tool/mysql-8.0.26/log/mysqld-error.log
#进程文件位置
pid-file=/server/tool/mysql-8.0.26/run/mysqld.pid
#主库设置，指同步日志的文件名,默认在data目录下，也可直接指定一个路径
log-bin=/server/tool/mysql-8.0.26/log/mysql-bin

#是否支持符号链接，即数据库或表可以存储在my.cnf中指定datadir之外的分区或目录，为0不开启
#symbolic-links=0
#mysql最大接受的数据包大小
max_allowed_packet=1024M
#sql_mode模式，定义了你MySQL应该支持的sql语法，对数据的校验等等，限制一些所谓的‘不合法’的操作。mysql8取消了NO_AUTO_CREATE_USER
sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO

	5、初始化数据库（初始化后会生成默认密码，请记录下来）
		创建用户组：groupadd mysql
		创建用户：useradd -r -g mysql -s /bin/false mysql
		改变文件所属用户组和用户：chown -R mysql:mysql /server/tool/mysql-8.0.26
		//“initialize”会生成一个随机密码，而”initialize-insecure”不会生成密码
		/server/tool/mysql-8.0.26/bin/mysqld --user=mysql --initialize-insecure
	6、设置开机自启动
		cp -p /server/tool/mysql-8.0.26/support-files/mysql.server /etc/init.d/mysqld-8.0.26
		chkconfig --add mysqld-8.0.26
		chkconfig mysqld-8.0.26 on
	7、设置环境变量是为了方便输入命令
		vi /etc/profile在最下面增加PATH=$PATH:/server/tool/nginx-1.22.0/sbin:/server/tool/php-7.4.30/bin:/server/tool/mysql-8.0.26/bin
		source /etc/profile
	8、启动mysql
		service mysqld-8.0.26 start
		//登录数据库
		mysql -uroot -p
		//修改密码
		ALTER USER 'root'@'localhost' IDENTIFIED BY 'root@123';
		//创建远程登录用户并授权（mysql8执行会报错，需分两步执行）
		//GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root@123' WITH GRANT OPTION;
		CREATE USER 'root'@'%' IDENTIFIED BY 'root@123';
		GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
		//刷新MySQL的系统权限相关表（新建mysql用户立即生效）
		FLUSH PRIVILEGES;
		//对外开放3306端口
		阿里云内安全组开放3306端口

二、redis安装部分（源码安装，依赖：yum -y install gcc gcc-c++）
	1、创建安装目录
		mkdir -p /server/tool/redis-6.2.6
	2、解压php安装
		tar zxvf redis-6.2.6.tar.gz
		进入解压目录编译
		//报这个错误时，jemalloc/jemalloc.h：没有那个文件或目录。使用make MALLOC=libc编译
		make
		编译完进入src目录安装
		make install PREFIX=/server/tool/redis-6.2.6
	3、拷贝配置文件
		mkdir -p /server/tool/redis-6.2.6/bin /server/tool/redis-6.2.6/etc
		cp /server/redis-6.2.6/redis.conf /server/tool/redis-6.2.6/etc
	4、启用redis
		/server/tool/redis-6.2.6/bin/redis-server /server/tool/redis-6.2.6/etc/redis.conf
	5、设置redis后台运行
		修改配置文件redis.conf
        将daemonize的值改为yes允许redis后台运行（守护进程）
		vi /server/tool/redis-6.2.6/etc/redis.conf
	6、开机自启动
		编辑文件vi /etc/init.d/redis-6.2.6 写入
#!/bin/sh
# chkconfig: - 20 80
# description: Redis is an open source, advanced key-value store
source /etc/init.d/functions
BIN="server/tool/redis-6.2.6/bin"
CONFIG="server/tool/redis-6.2.6/etc/redis.conf"
PIDFILE="server/tool/redis-6.2.6/redis.pid"
### Read configuration
[ -r "$SYSCONFIG" ] && source "$SYSCONFIG"
RETVAL=0
prog="redis-server"
desc="Redis Server"
start() {
        if [ -e $PIDFILE ];then
             echo "$desc already running...."
             exit 1
        fi
        echo -n $"Starting $desc: "
        daemon $BIN/$prog $CONFIG
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/$prog
        return $RETVAL
}
stop() {
        echo -n $"Stop $desc: "
        killproc $prog
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$prog $PIDFILE
        return $RETVAL
}
restart() {
        stop
        start
}
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  condrestart)
        [ -e /var/lock/subsys/$prog ] && restart
        RETVAL=$?
        ;;
  status)
        status $prog
        RETVAL=$?
        ;;
   *)
        echo $"Usage: $0 {start|stop|restart|condrestart|status}"
        RETVAL=1
esac
exit $RETVAL

	//再执行一下命令设置自启动
	chmod 755 /etc/init.d/redis-6.2.6
	chkconfig --add redis-6.2.6
	chkconfig redis-6.2.6 on

	7、客户端连接测试
		/server/tool/redis-6.2.6/bin/redis-cli